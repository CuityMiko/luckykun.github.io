<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luckykun-不一样的世界</title>
  <subtitle>我就是我，颜色不一样的烟火</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-04T15:06:39.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>luckykun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3深入学习之奇技淫巧</title>
    <link href="http://yoursite.com/work/2016-07-04/css3-study01.html"/>
    <id>http://yoursite.com/work/2016-07-04/css3-study01.html</id>
    <published>2016-07-04T14:39:19.000Z</published>
    <updated>2016-07-04T15:06:39.000Z</updated>
    
    <content type="html">&lt;p&gt;自CSS3流行以来，虽然以前看过一遍所有的新增属性，但其实在实际项目中用到的少之又少。所以没有形成系统性的认识，以及看到效果立马就能想到解决方案的能力。然后最近正好遇到一个需要绘制大量动画的需求，所以决定趁此机会好好研究一下这个既熟悉又陌生的css3。&lt;/p&gt;
&lt;p&gt;在正式开始css3之前，先来介绍一些比较经典的&lt;code&gt;css3实例&lt;/code&gt;，让大家好好感受一下css3的魅力，本文会提到以下几个css3的属性：&lt;/p&gt;
&lt;p&gt;border-radius、::after、attr和content、box-sizing、linear-gradient、radial-gradient、box-shadow&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;border-radius&quot;&gt;&lt;a href=&quot;#border-radius&quot; class=&quot;headerlink&quot; title=&quot;border-radius&quot;&gt;&lt;/a&gt;border-radius&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;相信这个属性，写过css的同学都知道，用来产生圆角，比如画一个圆形：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;    &lt;span class=&quot;comment&quot;&gt;//border-radius:100%;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后我们来看看它的语法：&lt;code&gt;border-radius: [左上] [右上] [右下] [左下]&lt;/code&gt;，于是我们来画一个半圆&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那如果要画一个椭圆该怎么办呢？你会发现上面的语法貌似做不到了，其实border-radius的值还有一种语法: &lt;code&gt;x半径/y半径&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px/&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css33.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果我要画半个椭圆，又要咋办呢？&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: 100px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius: 100% 0 0 100% /50%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css34.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;after&quot;&gt;&lt;a href=&quot;#after&quot; class=&quot;headerlink&quot; title=&quot;::after&quot;&gt;&lt;/a&gt;::after&lt;/h1&gt;&lt;p&gt;这里拿个简单的例子来看，我们要画一个放大镜，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css35.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分析一下，这个放大镜可以由两个div组成，一个是黑色的圆环，一个是黑色把手（旋转45度）。所以我们就需要用两个div来实现吗？答案是NO，一个div也是可以的，我们可以借助&lt;code&gt;::after&lt;/code&gt;来添加一个元素。同理如果需要三个div，我们还可以使用&lt;code&gt;::before&lt;/code&gt;再添加一个元素。下面看一下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: 50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius: 50%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border: 5px solid #333;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;div::after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    content: &#39;&#39;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    display: block;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: 8px;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 60px;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius: 5px;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: #333;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: absolute;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    right: -22px;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    top: 38px;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    transform: rotate(-45deg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;attr和content&quot;&gt;&lt;a href=&quot;#attr和content&quot; class=&quot;headerlink&quot; title=&quot;attr和content&quot;&gt;&lt;/a&gt;attr和content&lt;/h1&gt;&lt;p&gt;比如我们要实现一个悬浮提示的功能。传统方法，使用title属性就能实现，但是现在我们要更美观，可以使用css3提供的&lt;code&gt;attr：能够在css中获取到元素的某个属性值，然后插入到伪元素的content中去。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假如我们的html代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div data-title=&lt;span class=&quot;string&quot;&gt;&quot;hello, world&quot;&lt;/span&gt;&amp;gt;hello...&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来看看实现这个插件的css代码：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;div:hover::after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    content: attr(data-title);    //取到data-title属性的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    display: inline-block;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    padding: 10px 14px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border: 1px solid #ddd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius: 5px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    top: -50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    left: -30px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当hover的时候，在元素尾部添加一个内容为data-title属性值的元素，所以就实现了hover显示的效果，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css3hello.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;box-sizing&quot;&gt;&lt;a href=&quot;#box-sizing&quot; class=&quot;headerlink&quot; title=&quot;box-sizing&quot;&gt;&lt;/a&gt;box-sizing&lt;/h1&gt;&lt;p&gt;我们知道，在标准盒子模型中，元素的总宽＝content + padding + border + margin。 css中的盒子模型大家可能都知道，但是这个盒子模型的属性可能没有那么多人知道，&lt;code&gt;box-sizing&lt;/code&gt;属性就是用来重定义这个计算方式的，它有三个取值，分别是：&lt;code&gt;content-box（默认）&lt;/code&gt;、&lt;code&gt;border-box&lt;/code&gt;、&lt;code&gt;padding-box&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一般来说，假如我们需要有一个&lt;code&gt;占宽200px、padding10px、border5px的div&lt;/code&gt;，经过计算，要这么定义样式。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;170&lt;/span&gt;px;   &lt;span class=&quot;comment&quot;&gt;//这里的宽度要使用200-10*2-5*2 = 170得到。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    padding: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px solid red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们来使用一下box-sizing属性。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    box-sizing: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;px;  &lt;span class=&quot;comment&quot;&gt;//这里的宽度就是元素所占总宽度，不需要计算  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    padding: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;px solid red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;linear-gradient&quot;&gt;&lt;a href=&quot;#linear-gradient&quot; class=&quot;headerlink&quot; title=&quot;linear-gradient&quot;&gt;&lt;/a&gt;linear-gradient&lt;/h1&gt;&lt;p&gt;做活动页面的时候我们经常会遇到这样的需求：&lt;/p&gt;
&lt;p&gt;顶部的中间一张大banner图片，然后整个区域的背景色要根据图片背景色渐变。就可以使用这个属性了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: linear-gradient(to right, red, yellow, black, green);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css39.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;是不是很有趣？其实，&lt;code&gt;linear-gradient&lt;/code&gt;还有更多有趣的功能，你可以根据下面的动图去感受一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css3gradi2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你以为这就完了？等等，还有更强大的呢！&lt;code&gt;repeating-linear-gradient&lt;/code&gt;，来感受一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css3gradi.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;linear-gradient&lt;/code&gt;还有更加强大的功能，比如它可以给元素添加多个渐变，从而达到更NB的效果。&lt;/p&gt;
&lt;h1 id=&quot;radial-gradient&quot;&gt;&lt;a href=&quot;#radial-gradient&quot; class=&quot;headerlink&quot; title=&quot;radial-gradient&quot;&gt;&lt;/a&gt;radial-gradient&lt;/h1&gt;&lt;p&gt;上面的&lt;code&gt;linear-gradient&lt;/code&gt;是线性渐变，这个属性是径向渐变。下面的代码实现了一个chrome的logo。 &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;div.chrome &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: 180px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 180px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    border-radius: 50%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    box-shadow: 0 0 4px #999, 0 0 2px #ddd inset;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: radial-gradient(circle, #4FACF5 0, #2196F3 28%, transparent 28%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                radial-gradient(circle, #fff 33%, transparent 33%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(-50deg, #FFEB3B 34%, transparent 34%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(60deg, #4CAF50 33%, transparent 33%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(180deg, #FF756B 0, #F44336 30%, transparent 30%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(-120deg, #FFEB3B 40%, transparent 40%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(-60deg, #FFEB3B 30%, transparent 30%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(0deg, #4CAF50 45%, transparent 45%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(60deg, #4CAF50 30%, transparent 30%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(120deg, #F44336 50%, transparent 50%),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                linear-gradient(180deg, #F44336 30%, transparent 30%);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现原理就是使用了多个渐变色放在div上，友协被遮住，视觉上就产生了想要的效果，是不是很强大！看了下图你就知道其实就是在div上加了很多个渐变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css3test6.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;box-shadow&quot;&gt;&lt;a href=&quot;#box-shadow&quot; class=&quot;headerlink&quot; title=&quot;box-shadow&quot;&gt;&lt;/a&gt;box-shadow&lt;/h1&gt;&lt;p&gt;上面的例子大都是对css3新属性的了解和认识，这个实例则是有关于解决方案的例子。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;需求：我们要实现下面这个效果图（三个边框：黑色，绿色，红色）：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css37.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解法一：假如没有css3知识，我们可以做这样做：用三个div，分别设置边框，然后分别控制宽高和位置来达到这个效果。显然，很复杂，这里就不贴代码了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解法二：现在我们有css3的知识了，借助&lt;code&gt;box-shadow&lt;/code&gt;就可以轻松解决这个问题。先来看看它的语法：&lt;code&gt;box-shadow: [x偏移] [y偏移] [阴影模糊宽度] [阴影宽度] [颜色]&lt;/code&gt;，并且还能添加多个阴影，使用逗号隔开。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css3borde2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  当然你还可以继续增加，四重边框，五重边框……都不再是问题啦。另外，还能加圆角，阴影会贴紧内层div。&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;使用这种方法，有一个缺点就是，不支持虚线边框。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解法三： 使用outline（只能支持两重边框）&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/css3border.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;使用这种方法的缺点就是，只能支持两层的边框，而且还不能根据容器的border-radius自动贴合。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;通过这段时间对css3的深入了解，发现css3真的很强大，研究起来还是挺有趣的，只有想不到，感觉没有做不到。不过为了实现很酷炫的效果，可能需要编写大量的css代码，这个时候使用什么技术就需要我们自己来衡量了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自CSS3流行以来，虽然以前看过一遍所有的新增属性，但其实在实际项目中用到的少之又少。所以没有形成系统性的认识，以及看到效果立马就能想到解决方案的能力。然后最近正好遇到一个需要绘制大量动画的需求，所以决定趁此机会好好研究一下这个既熟悉又陌生的css3。&lt;/p&gt;
&lt;p&gt;在正式开始css3之前，先来介绍一些比较经典的&lt;code&gt;css3实例&lt;/code&gt;，让大家好好感受一下css3的魅力，本文会提到以下几个css3的属性：&lt;/p&gt;
&lt;p&gt;border-radius、::after、attr和content、box-sizing、linear-gradient、radial-gradient、box-shadow&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
      <category term="实例" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>tiny-heart-demo</title>
    <link href="http://yoursite.com/work/2016-05-30/tiny-heart-demo.html"/>
    <id>http://yoursite.com/work/2016-05-30/tiny-heart-demo.html</id>
    <published>2016-05-30T01:41:43.000Z</published>
    <updated>2016-07-04T14:38:23.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;style&gt;
.introduce{width:800px;min-height:50px;margin:0 auto;overflow:hidden;margin-top:-40px;}
.introduce p.title{width:800px;font-size: 16px;font-weight: bold;text-align: center;}
.page{width: 800px;min-height: 600px;margin: 0px auto;margin-top: 6px;}
#main{width: 800px;height: 600px;position: relative;top: -60px;}
#canvas1, #canvas2 {width: 800px;height: 600px;position: absolute;left: 0;top: 0;}
#canvas1{z-index: 1;}
#canvas2{z-index: 0;}
&lt;/style&gt;

&lt;p&gt;&lt;header style=&quot;margin-top:-55px;text-align:center;&quot;&gt;&lt;br&gt;    &lt;h1&gt;&lt;span&gt;TinyHeart&lt;/span&gt;&lt;a href=&quot;https://github.com/luckykun/tinyHeart&quot; style=&quot;font-size:14px;font-weight:normal;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view on github&lt;/a&gt;&lt;/h1&gt;&lt;br&gt;&lt;/header&gt;&lt;/p&gt;
&lt;div class=&quot;introduce&quot;&gt;&lt;br&gt;    &lt;p class=&quot;title&quot;&gt;游戏规则：&lt;/p&gt;&lt;br&gt;    &lt;p&gt;1. 大鱼跟着鼠标的位置移动而吃到果实，如吃到红色果实，身体变红，画布下方的个数加1；如吃到蓝色果实，身体变蓝，画布下方的倍数加1。&lt;/p&gt;&lt;p&gt;2. 画布右上角显示着小鱼的体力值，初始为10，身体为红色，随着时间的推移，体力值减小，身体颜色变淡。&lt;/p&gt;&lt;p&gt;3. 大鱼吃到果实之后可以喂小鱼，此时小鱼的体力值会根据大鱼果实的数量相应增加，画布上方的分值等于画布下方的倍数乘以个数的累加和。&lt;/p&gt;&lt;p&gt;4. 当小鱼体力值减到0时，游戏结束；点击画布，则可重新开始游戏。好了，拯救小鱼行动开始，躁起来吧！&lt;/p&gt;&lt;br&gt;&lt;/div&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;page&quot;&gt;&lt;br&gt;    &lt;div class=&quot;content&quot; id=&quot;main&quot;&gt;&lt;br&gt;    &lt;canvas id=&quot;canvas1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;&lt;br&gt;    &lt;canvas id=&quot;canvas2&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;&lt;br&gt;&lt;/div&gt;


&lt;script src=&quot;https://rawgit.com/luckykun/tinyHeart/master/js/common-min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://rawgit.com/luckykun/tinyHeart/master/js/index-min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    jzk.startgame();
&lt;/script&gt;


&lt;hr&gt;
&lt;/div&gt;</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;style&gt;
.introduce{width:800px;min-height:50px;margin:0 auto;overflow:hidden;margin-top:-40px;}
.introduce p.title{width:800px;font-size: 16px;font-weight: bold;text-align: center;}
.page{width: 800px;min-height: 600px;margin: 0px auto;margin-top: 6px;}
#main{width: 800px;height: 600px;position: relative;top: -60px;}
#canvas1, #canvas2 {width: 800px;height: 600px;position: absolute;left: 0;top: 0;}
#canvas1{z-index: 1;}
#canvas2{z-index: 0;}
&lt;/style&gt;

&lt;p&gt;&lt;header style=&quot;margin-top:-55px;text-align:center;&quot;&gt;&lt;br&gt;    &lt;h1&gt;&lt;span&gt;TinyHeart&lt;/span&gt;&lt;a href=&quot;https://github.com/luckykun/tinyHeart&quot; style=&quot;font-size:14px;font-weight:normal;&quot;&gt;view on github&lt;/a&gt;&lt;/h1&gt;&lt;br&gt;&lt;/header&gt;&lt;/p&gt;
&lt;div class=&quot;introduce&quot;&gt;&lt;br&gt;    &lt;p class=&quot;title&quot;&gt;游戏规则：&lt;/p&gt;&lt;br&gt;    &lt;p&gt;1. 大鱼跟着鼠标的位置移动而吃到果实，如吃到红色果实，身体变红，画布下方的个数加1；如吃到蓝色果实，身体变蓝，画布下方的倍数加1。&lt;/p&gt;&lt;p&gt;2. 画布右上角显示着小鱼的体力值，初始为10，身体为红色，随着时间的推移，体力值减小，身体颜色变淡。&lt;/p&gt;&lt;p&gt;3. 大鱼吃到果实之后可以喂小鱼，此时小鱼的体力值会根据大鱼果实的数量相应增加，画布上方的分值等于画布下方的倍数乘以个数的累加和。&lt;/p&gt;&lt;p&gt;4. 当小鱼体力值减到0时，游戏结束；点击画布，则可重新开始游戏。好了，拯救小鱼行动开始，躁起来吧！&lt;/p&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="demo" scheme="http://yoursite.com/tags/demo/"/>
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>h5+canvas实现酷炫的小游戏</title>
    <link href="http://yoursite.com/work/2016-05-29/tiny-heart-study.html"/>
    <id>http://yoursite.com/work/2016-05-29/tiny-heart-study.html</id>
    <published>2016-05-29T01:41:43.000Z</published>
    <updated>2016-05-29T04:18:20.000Z</updated>
    
    <content type="html">&lt;p&gt;最近除了做业务，也在尝试学习h5和移动端，在这个过程中，学到了很多，利用h5和canvas做了一个爱心鱼的小游戏。源码在github上，down下来直接就能够运行。要是觉得还行，就给个star吧！&lt;a href=&quot;https://github.com/luckykun/tinyHeart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码地址点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面我就做游戏的步骤来分享总结一下用到h5和canvas的API和一些常见的数学函数。推荐你先去玩一玩游戏，才能更好的明白这些逻辑。&lt;a href=&quot;http://luckykun.com/work/2016-05-29/tiny-heart-demo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里去玩一下&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首先，一个游戏最重要的就是动画，怎么让元素动起来呢？先来看一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元素的位置移动，就形成了动画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一帧一帧的来渲染这个元素，而且这个元素每一帧的位置都不一样，我们的眼睛看到的就是动画了。OK，先来介绍&lt;code&gt;requestAnimationFrame&lt;/code&gt;这个函数。&lt;/p&gt;
&lt;p&gt;我们都知道，隔一段时间重新渲染，可以用到&lt;code&gt;setTimeout&lt;/code&gt; 和&lt;code&gt;setInterval&lt;/code&gt;这两个函数，那这里为什么不用呢？&lt;/p&gt;
&lt;p&gt;我来简单举个例子吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setInterval(myFun, 1);  意思是隔一毫秒执行一个myFun函数，但是这样就有一个问题了，比如我myFun函数里面绘制的东西比较耗时，而1ms之内还没有完全绘制出来，但是这段代码强制1ms之后又开始绘制下一帧了，所以就会出现&lt;code&gt;丢帧&lt;/code&gt;的问题，而如果时间设置太长，就会出现&lt;code&gt;视觉卡顿&lt;/code&gt;的问题。&lt;/li&gt;
&lt;li&gt;requestAnimationFrame(myFun); 如果我们这样写，又是什么意思呢？意思是根据&lt;code&gt;一定的时间间隔&lt;/code&gt;，会自动执行myFun函数来进行绘制。这个”一定的时间间隔”就是根据浏览器的性能或者网速快慢来决定了，总之，它会保证你绘制完这一帧，才会绘制下一帧，保证性能的同时，也保证动画的流畅。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动画解决了，那么用什么来绘制每一帧的页面呢？这时就要用到h5的神奇—-&lt;code&gt;canvas&lt;/code&gt;了，所以canvas画布的API非常重要。&lt;/p&gt;
&lt;h2 id=&quot;html文件&quot;&gt;&lt;a href=&quot;#html文件&quot; class=&quot;headerlink&quot; title=&quot;html文件&quot;&gt;&lt;/a&gt;html文件&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;canvas1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;800&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;600&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;canvas2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;800&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;600&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;定义两个画布，分别在画布上绘制相应的物体；&lt;/li&gt;
&lt;li&gt;canvas2 上绘制，背景、海葵、果实；&lt;/li&gt;
&lt;li&gt;canvas1 上绘制，大鱼、小鱼、显示文字、圆圈特效；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;js文件&quot;&gt;&lt;a href=&quot;#js文件&quot; class=&quot;headerlink&quot; title=&quot;js文件&quot;&gt;&lt;/a&gt;js文件&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        can1 = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;canvas1&#39;&lt;/span&gt;);     &lt;span class=&quot;comment&quot;&gt;//画布&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ctx1 = can1.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);   &lt;span class=&quot;comment&quot;&gt;//画笔&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        can2 = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;canvas2&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ctx2 = can2.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);   &lt;span class=&quot;comment&quot;&gt;//下面的canvas&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gameloop&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestAnimFrame(gameLoop);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//绘制物体...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; requestAnimFrame = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.webkitRequestAnimationFrame || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.mozRequestAnimationFrame || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.oRequestAnimationFrame || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.msRequestAnimationFrame ||&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback, element&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.setTimeout(callback, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;init函数初始化一些变量，比如海葵对象，大鱼、小鱼对象等等。&lt;/li&gt;
&lt;li&gt;gameloop函数用于绘制每一帧的页面。下面所介绍的所有绘制函数都是在这里执行。&lt;/li&gt;
&lt;li&gt;requestAnimFrame函数是为了兼容所有浏览器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们就开始绘制游戏中出现的东西，顺便看看都用到了哪些有趣的API函数。go！go！go！&lt;/p&gt;
&lt;h1 id=&quot;绘制背景和海葵&quot;&gt;&lt;a href=&quot;#绘制背景和海葵&quot; class=&quot;headerlink&quot; title=&quot;绘制背景和海葵&quot;&gt;&lt;/a&gt;绘制背景和海葵&lt;/h1&gt;&lt;p&gt;背景是一张图，而海葵是一个类，它有x坐标，y坐标，个数等等属性，有初始化init和draw方法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;drawImage(image, x, y, width, height)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.save();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.globalAlpha = &lt;span class=&quot;number&quot;&gt;0.7&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.lineWidth = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.lineCap = &lt;span class=&quot;string&quot;&gt;&#39;round&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.strokeStyle = &lt;span class=&quot;string&quot;&gt;&#39;#3b154e&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.moveTo(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rootx[i], canHei);     &lt;span class=&quot;comment&quot;&gt;//起始点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.lineTo(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rootx[i], canHei - &lt;span class=&quot;number&quot;&gt;220&lt;/span&gt;,);  &lt;span class=&quot;comment&quot;&gt;//结束点    ctx2.stroke();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx2.restore();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;ctx2.drawImage(image, x, y, width, height)    //x,y代表坐标，width和height代表宽高&lt;/li&gt;
&lt;li&gt;ctx2.save();   //定义作用空间&lt;/li&gt;
&lt;li&gt;ctx2.globalAlpha = 0.7;      //定义线的透明度&lt;/li&gt;
&lt;li&gt;ctx2.lineWidth = 20;       //  宽度&lt;/li&gt;
&lt;li&gt;ctx2.lineCap = ‘round’;     // 圆角&lt;/li&gt;
&lt;li&gt;ctx2.strokeStyle = ‘#3b154e’;   //定义绘制线条的颜色&lt;/li&gt;
&lt;li&gt;ctx2.beginPath();    //开始路径&lt;/li&gt;
&lt;li&gt;ctx2.moveTo(x,y);     //线的起点，x,y代表坐标（坐标原点在左上角）&lt;/li&gt;
&lt;li&gt;ctx2.lineTo(x,y);    // 线条从起点连接到这个点&lt;/li&gt;
&lt;li&gt;ctx2.stroke();       // 开始绘制线条&lt;/li&gt;
&lt;li&gt;ctx2.restore();      //作用空间结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;海葵产生果实&quot;&gt;&lt;a href=&quot;#海葵产生果实&quot; class=&quot;headerlink&quot; title=&quot;海葵产生果实&quot;&gt;&lt;/a&gt;海葵产生果实&lt;/h1&gt;&lt;p&gt;果实也是一个类，他的属性有：坐标、类型（黄色和蓝色）、大小、状态（显示还是隐藏）、速度（向上漂浮的速度）等等属性；他的方法有：初始化init、出生born和绘制draw。&lt;/p&gt;
&lt;p&gt;draw方法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.alive[i])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//find an ane, grow, fly up...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size[i] &amp;lt;= &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//长大状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.grow[i] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size[i] += &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.speed[i] * diffframetime * &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//已经长大,向上漂浮&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.grow[i] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y[i] -= &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.speed[i] * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; * diffframetime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pic = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.orange;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type[i] == &lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;)   pic = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.blue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ctx2.drawImage(pic, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x[i] - &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size[i] * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y[i] - &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size[i] * &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size[i], &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.size[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y[i] &amp;lt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.alive[i] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;born方法：随机找到一个海葵的坐标，在海葵的坐标上出生一个果实。&lt;/p&gt;
&lt;h1 id=&quot;绘制大鱼和小鱼&quot;&gt;&lt;a href=&quot;#绘制大鱼和小鱼&quot; class=&quot;headerlink&quot; title=&quot;绘制大鱼和小鱼&quot;&gt;&lt;/a&gt;绘制大鱼和小鱼&lt;/h1&gt;&lt;p&gt;大鱼和小鱼都是一个类，它的属性有：坐标、旋转角度、尾巴摆动时间间隔、眨眼睛时间间隔、身体图片数组….等等&lt;/p&gt;
&lt;p&gt;先把大鱼绘制出来，用canvas的drawImage方法。&lt;/p&gt;
&lt;p&gt;比较难的是大鱼的动画，大鱼会随着鼠标移动而移动的动画，这里定义了两个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lerpAngle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, t&lt;/span&gt;) &lt;/span&gt;&amp;#123;     &lt;span class=&quot;comment&quot;&gt;//计算每一帧旋转的角度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = b - a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d &amp;gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI) d = d - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d &amp;lt; -&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI) d = d + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + d * t;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lerpDistance&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;aim, cur, ratio&lt;/span&gt;) &lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//aim：目标 cur：当前 ratio：百分比  计算每一帧趋近的距离&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; delta = cur - aim;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; aim + delta * ratio&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.momTailTimer += diffframetime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.momTailTimer &amp;gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.momTailIndex = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.momTailIndex + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;//根据时间间隔改变尾巴图片&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.momTailTimer %= &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;lerpDistance 是计算每一帧大鱼趋紧到鼠标的距离。&lt;/li&gt;
&lt;li&gt;lerpAngle  用来计算大鱼每一帧向鼠标旋转的角度。 定义这两个函数，让大鱼动起来比较平滑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获得了一个角度之后，怎么让大鱼旋转起来呢？这里又需要用到几个API了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctx1.save();  //建议每次绘制都使用save和restore，可以避免定义样式，发生冲突。&lt;/li&gt;
&lt;li&gt;ctx1.translate(this.x, this.y);      //把原点变成(this.x , this.y);&lt;/li&gt;
&lt;li&gt;ctx1.rotate(this.angle);     //根据原点顺时针旋转一个角度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;绘制小鱼跟大鱼是一样的，不做详述。但是需要注意的是绘制小鱼的时候有个判断，当小鱼的颜色变白的时候，游戏结束。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.babyBodyTimer += diffframetime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.babyBodyTimer &amp;gt; &lt;span class=&quot;number&quot;&gt;550&lt;/span&gt;)&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//身体图片变化的计数器 &amp;gt; 550ms&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.babyBodyIndex += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;//身体图片变淡&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.babyBodyTimer %= &lt;span class=&quot;number&quot;&gt;550&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    scoreOb.strength = ((&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.babyBodyIndex)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.babyBodyIndex &amp;gt; &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;)&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//如果身体变成白色，game over；&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.babyBodyIndex = &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        scoreOb.gameOver = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        can1.style.cursor = &lt;span class=&quot;string&quot;&gt;&quot;pointer&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;大鱼吃果实&quot;&gt;&lt;a href=&quot;#大鱼吃果实&quot; class=&quot;headerlink&quot; title=&quot;大鱼吃果实&quot;&gt;&lt;/a&gt;大鱼吃果实&lt;/h1&gt;&lt;p&gt;大鱼吃果实是根据距离来判断定的，如果大鱼和果实的距离小于30，则让果实消失，并且出现白色圆环，并且分值有一定的变化。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;jzk.momEatFruit = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;     &lt;span class=&quot;comment&quot;&gt;//判断果实和大鱼之间的距离，小于30说明被吃掉&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; fruitOb.num; i++ )&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fruitOb.alive[i] &amp;amp;&amp;amp; fruitOb.grow[i])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; len = calLength2(fruitOb.x[i], fruitOb.y[i], momOb.x, momOb.y);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(len &amp;lt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                fruitOb.dead(i);    &lt;span class=&quot;comment&quot;&gt;//如果距离小于30，则被吃掉&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                waveOb.born(i);     &lt;span class=&quot;comment&quot;&gt;//吃掉的时候，产生圆圈&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                scoreOb.fruitNum ++;    &lt;span class=&quot;comment&quot;&gt;//吃到的果实数量＋1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                momOb.momBodyIndex = momOb.momBodyIndex == &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; ? momOb.momBodyIndex : (momOb.momBodyIndex + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);      &lt;span class=&quot;comment&quot;&gt;//大鱼的身体颜色红&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fruitOb.type[i] == &lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    scoreOb.doubleNum ++;  &lt;span class=&quot;comment&quot;&gt;//吃到蓝色果实，倍数＋1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中有一个calLength2函数，使用来计算两个点之间的距离的。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calLength2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x1, y1, x2, y2&lt;/span&gt;) &lt;/span&gt;&amp;#123;    &lt;span class=&quot;comment&quot;&gt;//计算两个点之间的距离，，， 先求平方和，再开平方&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.sqrt(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(x1 - x2, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(y1 - y2, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大鱼吃到果实的时候，会产生一个白色的圆圈，这个效果怎么实现呢？&lt;/p&gt;
&lt;p&gt;首先，我们定义一个waveObject类，它的属性有：坐标、数量、半径、使用状态。它的方法有：初始化、绘制和出生。&lt;/p&gt;
&lt;p&gt;我们来看一下绘制圆圈的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.status[i])&amp;#123;     &lt;span class=&quot;comment&quot;&gt;//如果圆圈是使用状态，则绘制圆圈&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.r[i] += diffframetime * &lt;span class=&quot;number&quot;&gt;0.04&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.r[i] &amp;gt; &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.status[i] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; alpha = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.r[i] / &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ctx1.strokeStyle = &lt;span class=&quot;string&quot;&gt;&quot;rgba(255, 255, 255, &quot;&lt;/span&gt;+ alpha +&lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ctx1.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ctx1.arc(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x[i], &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y[i], &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.r[i], &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI);   &lt;span class=&quot;comment&quot;&gt;//画圆，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ctx1.stroke();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一帧一帧的画每一个圆，圆的半径逐渐增大，透明度逐渐减小，直到半径大于60的时候，把状态设为false，让其回归物体池中。&lt;/p&gt;
&lt;p&gt;这里又用到了一个新的方法：ctx1.arc(x,y,r,deg);   //画圆，x,y是中心圆点，r是半径，deg是角度，360度就是一个整圆。&lt;/p&gt;
&lt;p&gt;再来看一下出生的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.status[i])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.status[i] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;//把圆圈状态设为使用状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x[i] = fruitOb.x[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y[i] = fruitOb.y[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.r[i] = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;//找到一个未使用的圆圈，就结束。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;圆圈出生的坐标就是被吃果实的坐标。&lt;/p&gt;
&lt;h1 id=&quot;大鱼喂小鱼&quot;&gt;&lt;a href=&quot;#大鱼喂小鱼&quot; class=&quot;headerlink&quot; title=&quot;大鱼喂小鱼&quot;&gt;&lt;/a&gt;大鱼喂小鱼&lt;/h1&gt;&lt;p&gt;大鱼喂小鱼同上，不再详述，这里喂小鱼之后，大鱼身体变白，小鱼随果实数量相应增多，另外需要注意的是，此时产生圆圈的坐标是小鱼的坐标。&lt;/p&gt;
&lt;h1 id=&quot;游戏分值计算&quot;&gt;&lt;a href=&quot;#游戏分值计算&quot; class=&quot;headerlink&quot; title=&quot;游戏分值计算&quot;&gt;&lt;/a&gt;游戏分值计算&lt;/h1&gt;&lt;p&gt;定义一个数据类，它的属性有：吃到的果实数量、倍数、总分、力量值、游戏状态（是否结束）等；方法有：初始化、绘制分数。&lt;/p&gt;
&lt;p&gt;这里我们需要在画布上绘制文字，又用到了新的API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctx1.save();&lt;/li&gt;
&lt;li&gt;ctx1.font = ‘40px verdana’;   定义文字的大小和字体；&lt;/li&gt;
&lt;li&gt;ctx1.shadowBlur = 10;    定义文字的阴影宽度&lt;/li&gt;
&lt;li&gt;ctx1.shadowColor = “white”;   定义文字阴影的颜色；&lt;/li&gt;
&lt;li&gt;ctx1.fillStyle = “rgba(255, 255, 255, “+ this.alpha +”)”;  定义文字的颜色（rgba,a代表透明度）&lt;/li&gt;
&lt;li&gt;ctx1.fillText(“GAME OVER”, canWid &lt;em&gt; 0.5, canHei &lt;/em&gt; 0.5 - 25);   绘制文字，第一个参数是字符串，支持表达式，后两个参数是坐标值。&lt;/li&gt;
&lt;li&gt;ctx1.font = ‘25px verdana’;&lt;/li&gt;
&lt;li&gt;ctx1.fillText(“CLICK TO RESTART”, canWid &lt;em&gt; 0.5, canHei &lt;/em&gt; 0.5 + 25);&lt;/li&gt;
&lt;li&gt;ctx1.restore();&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;好啦，整个游戏的制作过程就分享完了，做的过程中有遇到过很多问题，不过都一一解决了，加深了很多以前模糊的概念，也学到了很多新的知识，比如使用rgba()来一起控制颜色和透明度，以前还真没用到过。&lt;/p&gt;
&lt;p&gt;这个游戏本身功能比较简单，但是动画还算比较酷炫。这也算是一个比较基本的动画基础框架了，而比较不容易理解的地方也有很多，比如求趋近的角度函数&lt;code&gt;lerpAngle(a,b,c)&lt;/code&gt;，还有&lt;code&gt;Math.atan2()&lt;/code&gt;这个函数，等等。 欢迎大家提出bug或者改进建议～～～&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近除了做业务，也在尝试学习h5和移动端，在这个过程中，学到了很多，利用h5和canvas做了一个爱心鱼的小游戏。源码在github上，down下来直接就能够运行。要是觉得还行，就给个star吧！&lt;a href=&quot;https://github.com/luckykun/tinyHeart&quot;&gt;源码地址点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面我就做游戏的步骤来分享总结一下用到h5和canvas的API和一些常见的数学函数。推荐你先去玩一玩游戏，才能更好的明白这些逻辑。&lt;a href=&quot;http://luckykun.com/work/2016-05-29/tiny-heart-demo.html&quot;&gt;点这里去玩一下&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>React入门最好的实例－TodoList</title>
    <link href="http://yoursite.com/work/2016-05-23/react-todo-study.html"/>
    <id>http://yoursite.com/work/2016-05-23/react-todo-study.html</id>
    <published>2016-05-23T14:11:51.000Z</published>
    <updated>2016-05-24T14:15:12.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;React 的核心思想是：封装组件，各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近前端界闹的沸沸扬扬的技术当属&lt;code&gt;react&lt;/code&gt;了，加上项目需要等等原因，自己也决定花些时间来好好认识下这个东西。然后学习的时候顺便花时间写了一个demo：&lt;code&gt;react-todos&lt;/code&gt;， 为了提起兴趣，你可以先&lt;a href=&quot;http://luckykun.com/work/2016-05-08/react-todo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里去看react-todo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先react值得拍手称赞的是它所有的开发都基于&lt;code&gt;组件（component）&lt;/code&gt;，然后组件和组件之间通过props传递方法，每个组件都有一个&lt;code&gt;状态（state）&lt;/code&gt;，当某个方法改变了这个状态值时，整个组件就会&lt;code&gt;重绘&lt;/code&gt;，从而达到刷新。另外，说到重绘就要提到&lt;code&gt;虚拟dom&lt;/code&gt;了，就是用js模拟dom结构，等整个组件的dom更新完毕，才渲染到页面，简单来说只更新了相比之前改变了的部分，而不是全部刷新，所以效率很高。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目初始化&quot;&gt;&lt;a href=&quot;#项目初始化&quot; class=&quot;headerlink&quot; title=&quot;项目初始化&quot;&gt;&lt;/a&gt;项目初始化&lt;/h1&gt;&lt;p&gt;大家先新建一个项目文件夹，在里面建一个项目信息的文件&lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;react-todos&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.13.3&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.5.0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^5.5.8&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^5.1.4&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.14.5&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.8.4&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;jsx-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.13.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;node-libs-browser&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.5.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;node-sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.2.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;sass-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.0.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.12.3&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;url-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.5.6&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.9.11&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;建好之后，运行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装项目依赖的所有模块。安装好之后，另外还有一点，项目数据是存储在本地浏览器的，所以我找到一个小模块用来操作localStorage，它的原理就是，通过将数据格式化成JSON字符串进行存储，使用的时候就解析JSON字符串。他的代码&lt;a href=&quot;https://github.com/luckykun/react-demo/tree/master/node_modules/localDb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里看localDb&lt;/a&gt;可以看到，你可以复制一份，放在node_modules的文件夹内。&lt;/p&gt;
&lt;h1 id=&quot;webpack配置&quot;&gt;&lt;a href=&quot;#webpack配置&quot; class=&quot;headerlink&quot; title=&quot;webpack配置&quot;&gt;&lt;/a&gt;webpack配置&lt;/h1&gt;&lt;p&gt;项目使用的技术方案是：&lt;code&gt;webpack＋react＋es6&lt;/code&gt;。关于es6的文章，我之前简单的介绍过，可以&lt;a href=&quot;http://luckykun.com/work/2016-05-10/es6-feature.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里去看es6&lt;/a&gt;，关于webpack的学习，我这里不详述了，看以后有时间再出篇文章吧。在项目文件夹下新建一个&lt;code&gt;webpack.config.js&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;./src/entry.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path: &lt;span class=&quot;string&quot;&gt;&#39;./out/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    externals: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;React&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&quot;jsx!babel&quot;&lt;/span&gt;, include: &lt;span class=&quot;regexp&quot;&gt;/src/&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&quot;style!css&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.scss$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&quot;style!css!sass&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.(png|jpg)$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;url?limit=8192&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的文件可以看到：入口文件是在src文件夹里的entry.js，然后输出文件放在out文件夹的bundle.js里。externals属性是告诉webpack当遇到require(‘react’)的时候，不去处理并且默认为全局的React变量。这样子，我们就需要在index.html单独用src去加载js。最后看看配置的loaders：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为我们js文件会使用jsx和es6的语法，所以使用&lt;code&gt;jsx-loader&lt;/code&gt;和&lt;code&gt;babel-loader&lt;/code&gt;来编译js文件。&lt;/li&gt;
&lt;li&gt;scss文件使用&lt;code&gt;sass-loader&lt;/code&gt;编译成css文件。&lt;/li&gt;
&lt;li&gt;写的时候可以省略-loader，多个loader使用&lt;code&gt;!&lt;/code&gt;连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;项目目录&quot;&gt;&lt;a href=&quot;#项目目录&quot; class=&quot;headerlink&quot; title=&quot;项目目录&quot;&gt;&lt;/a&gt;项目目录&lt;/h1&gt;&lt;p&gt;先来看一下项目的目录结构，最重要的就是src目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;是项目的入口页面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components&lt;/code&gt;文件夹存放项目拆分出来的各个组件文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vendor&lt;/code&gt;文件夹存放项目依赖的框架，这里只有react。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;index-html和entry-js&quot;&gt;&lt;a href=&quot;#index-html和entry-js&quot; class=&quot;headerlink&quot; title=&quot;index.html和entry.js&quot;&gt;&lt;/a&gt;index.html和entry.js&lt;/h1&gt;&lt;p&gt;先来看index.html：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;header&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;h1 class=&quot;todo-title&quot;&amp;gt;React-Todos&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/header&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;div class=&quot;container todo-container&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;script src=&quot;./src/vendor/react.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;script src=&quot;./out/bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;entry.js :&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./styles/main.scss&#39;&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// 引入样式表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/App&#39;&lt;/span&gt;);     &lt;span class=&quot;comment&quot;&gt;// 引入组件&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;webpack会将入口文件进行合并和整理，最后输出一个bundle.js，所以所有的逻辑都在这个js文件中，因此在index.html中，只需要引入react框架和bundle.js就好了。&lt;/p&gt;
&lt;h1 id=&quot;分析组件&quot;&gt;&lt;a href=&quot;#分析组件&quot; class=&quot;headerlink&quot; title=&quot;分析组件&quot;&gt;&lt;/a&gt;分析组件&lt;/h1&gt;&lt;p&gt;这个todo的项目，我们可以分为三个部分：头部，中间部分，尾部。那我们就来逐一的分析一下这些组件：&lt;/p&gt;
&lt;h2 id=&quot;App&quot;&gt;&lt;a href=&quot;#App&quot; class=&quot;headerlink&quot; title=&quot;App&quot;&gt;&lt;/a&gt;App&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LocalDb &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;localDb&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; TodoHeader &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./TodoHeader.js&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; TodoMain &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./TodoMain.js&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; TodoFooter &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./TodoFooter.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//es6写法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;//定义组件，继承父类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;() &amp;#123; &lt;span class=&quot;comment&quot;&gt;//定义App类的构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//调用父类的构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LocalDb(&lt;span class=&quot;string&quot;&gt;&#39;ReactDemo&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123; &lt;span class=&quot;comment&quot;&gt;//定义组件状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            todos: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.get(&lt;span class=&quot;string&quot;&gt;&#39;todos&#39;&lt;/span&gt;) || [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            isAllChecked: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断是否所有任务的状态都完成，同步底部的全选框&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    allChecked() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; isAllChecked = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.every(todo =&amp;gt; todo.isDone)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            isAllChecked = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//改变状态，组件重绘&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            todos: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            isAllChecked: isAllChecked&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 添加任务，是传递给Header组件的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    addTodo(todoItem)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.push(todoItem);  &lt;span class=&quot;comment&quot;&gt;//todo列表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.set(&lt;span class=&quot;string&quot;&gt;&#39;todos&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.allChecked();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 删除当前的任务，传递给TodoItem的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    deleteTodo(index)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.splice(index, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;todos: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos&amp;#125;);  &lt;span class=&quot;comment&quot;&gt;//改变状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.set(&lt;span class=&quot;string&quot;&gt;&#39;todos&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 清除已完成的任务，传递给Footer组件的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    clearDone()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; todos = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.filter(todo =&amp;gt; !todo.isDone);   &lt;span class=&quot;comment&quot;&gt;//过滤掉数组中todo.isDone为true的item。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            todos: todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            isAllChecked: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.set(&lt;span class=&quot;string&quot;&gt;&#39;todos&#39;&lt;/span&gt;, todos);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 改变任务状态，传递给TodoItem和Footer组件的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    changeTodoState(index, isDone, isChangeAll=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//初始化isChangeAll为false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isChangeAll)&amp;#123;     &lt;span class=&quot;comment&quot;&gt;//全部操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                todos: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.map((todo) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    todo.isDone = isDone;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                isAllChecked: isDone&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//操作其中一个todo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos[index].isDone = isDone;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.allChecked();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.set(&lt;span class=&quot;string&quot;&gt;&#39;todos&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//组件渲染方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; info = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            isAllChecked: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.isAllChecked,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            todoCount: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.length || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            todoDoneCount: (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.filter((todo) =&amp;gt; todo.isDone)).length || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;div className=&quot;todo-wrap&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;TodoHeader addTodo=&amp;#123;this.addTodo.bind(this)&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;TodoMain todos=&amp;#123;this.state.todos&amp;#125; deleteTodo=&amp;#123;this.deleteTodo.bind(this)&amp;#125; changeTodoState=&amp;#123;this.changeTodoState.bind(this)&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;TodoFooter &amp;#123;...info&amp;#125; changeTodoState=&amp;#123;this.changeTodoState.bind(this)&amp;#125; clearDone=&amp;#123;this.clearDone.bind(this)&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;React.render(&amp;lt;App/&amp;gt;, document.getElementById(&#39;app&#39;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们知道React的主流思想就是，所有的state状态和方法都是由父组件控制，然后通过props传递给子组件，形成一个单方向的数据链路，保持各组件的状态一致。所以我们在这个父组件App上，看的东西稍微有点多。一点点来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它采用es6的语法来创建了一个&lt;code&gt;继承React.Components的App类&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;然后在构造函数里定义了自己的&lt;code&gt;状态state&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;然后定义了很多方法，后面通过&lt;code&gt;props传递给子组件&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后定义组件自己的渲染方法&lt;code&gt;render&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;App状态&quot;&gt;&lt;a href=&quot;#App状态&quot; class=&quot;headerlink&quot; title=&quot;App状态&quot;&gt;&lt;/a&gt;App状态&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123; &lt;span class=&quot;comment&quot;&gt;//定义组件状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todos: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.get(&lt;span class=&quot;string&quot;&gt;&#39;todos&#39;&lt;/span&gt;) || [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    isAllChecked: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在App组件的构造函数里，我们初始化了组件的state，分别有两个，一个是todos的列表，一个是所有的todos是否全选的状态。在渲染的时候，我们会把状态传递到子组件中，如果子组件的某一个方法让状态发生了改变，那么整个组件就会进行重绘。&lt;/p&gt;
&lt;h3 id=&quot;App的方法&quot;&gt;&lt;a href=&quot;#App的方法&quot; class=&quot;headerlink&quot; title=&quot;App的方法&quot;&gt;&lt;/a&gt;App的方法&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 判断是否所有任务的状态都完成，同步底部的全选框&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;allChecked() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 添加任务，是传递给Header组件的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;addTodo(todoItem) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 删除当前的任务，传递给TodoItem的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deleteTodo(index) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 清除已完成的任务，传递给Footer组件的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;clearDone() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改变任务状态，传递给TodoItem和Footer组件的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;changeTodoState(index, isDone, isChangeAll=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//组件渲染方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; info = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        isAllChecked: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.isAllChecked,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        todoCount: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.length || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        todoDoneCount: (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.todos.filter((todo) =&amp;gt; todo.isDone)).length || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div className=&quot;todo-wrap&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;TodoHeader addTodo=&amp;#123;this.addTodo.bind(this)&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;TodoMain todos=&amp;#123;this.state.todos&amp;#125; deleteTodo=&amp;#123;this.deleteTodo.bind(this)&amp;#125; changeTodoState=&amp;#123;this.changeTodoState.bind(this)&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;TodoFooter &amp;#123;...info&amp;#125; changeTodoState=&amp;#123;this.changeTodoState.bind(this)&amp;#125; clearDone=&amp;#123;this.clearDone.bind(this)&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。上面的&lt;code&gt;TodoHeader&lt;/code&gt;是用来输入任务的地方，中间的&lt;code&gt;TodoMain&lt;/code&gt;是用来展示任务列表的, 下面的&lt;code&gt;TodoFooter&lt;/code&gt;提供一些特殊的方法，比如全选、删除等。&lt;/p&gt;
&lt;p&gt;另外，上面省去function创建函数的方法，是es6的一种语法，关于es6，我之前总结过一篇文章&lt;a href=&quot;http://luckykun.com/work/2016-05-10/es6-feature.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里去看es6&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;App组件定义的方法，会在渲染的时候传递给子组件，比如TodoHeader组件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;TodoHeader addTodo=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addTodo.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&amp;#125; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过props传递子组件需要的值和方法。&lt;/li&gt;
&lt;li&gt;传递方法时一定要bind(this)，不然内部this会指向不正确。&lt;/li&gt;
&lt;li&gt;子组件的标签使用的时候一定要使用&lt;code&gt;/&lt;/code&gt;闭合起来。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ES6语法，spread操作符让代码简洁很多，如上述代码中的TodoFooter:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;TodoFooter &amp;#123;...info&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果不使用spread操作符，就要这样写：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;TodoFooter isAllchecked=&amp;#123;info.isAllChecked&amp;#125; todoCount=&amp;#123;info.todoCount&amp;#125;     todoDoneCount=&amp;#123;info.todoDoneCount&amp;#125;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;渲染App&quot;&gt;&lt;a href=&quot;#渲染App&quot; class=&quot;headerlink&quot; title=&quot;渲染App&quot;&gt;&lt;/a&gt;渲染App&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;React.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把上面的App组件的内容渲染到id为’app’的dom元素里。&lt;/p&gt;
&lt;p&gt;然后我们再简单看一下分解出来的三个组件：&lt;code&gt;TodoHeader&lt;/code&gt;, &lt;code&gt;TodoMain&lt;/code&gt;, &lt;code&gt;TodoFooter&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;TodoHeader组件&quot;&gt;&lt;a href=&quot;#TodoHeader组件&quot; class=&quot;headerlink&quot; title=&quot;TodoHeader组件&quot;&gt;&lt;/a&gt;TodoHeader组件&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TodoHeader&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 绑定键盘回车事件，添加新任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    handlerKeyUp(e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(e.keyCode == &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = e.target.value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!value) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; newTodoItem = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                text: value,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                isDone: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.target.value = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.addTodo(newTodoItem);   &lt;span class=&quot;comment&quot;&gt;//使用props调用App组件传过来的方法。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;todo-header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onKeyUp&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handlerKeyUp.bind(this)&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;请输入你的任务名称，按回车键确认&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export default TodoHeader;   //ES6语法，导出模块，上文提到的es6文章中有讲解&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TodoHeader组件的创建方法和App组件的创建方法一样，内部方法就少了很多了，这里就定义了一个监听键盘的方法，绑定到了输入框的keyUp事件上，敲击回车键的时候就会调用父组件传过来的&lt;code&gt;addTodo()方法&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;TodoMain组件&quot;&gt;&lt;a href=&quot;#TodoMain组件&quot; class=&quot;headerlink&quot; title=&quot;TodoMain组件&quot;&gt;&lt;/a&gt;TodoMain组件&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TodoMain&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.todos.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;todo-empty&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;恭喜您，目前没有待办任务！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;todo-main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        this.props.todos.map((todo, index) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            //&amp;#123;...this.props&amp;#125; 用来传递TodoMain的todos属性和delete、change方法。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            return &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TodoItem&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;todo.text&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;isDone&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;todo.isDone&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;index&amp;#125;&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;...this.props&lt;/span&gt;&amp;#125;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TodoMain组件主要是为了把传递过来的todos列表遍历显示出来，而每一个list又是一个TodoItem组件。这里又用到了spread操作符&lt;code&gt;{...this.props}&lt;/code&gt;，代码中也做了注释，可以洗洗品味一下。&lt;/p&gt;
&lt;h2 id=&quot;TodoItem组件&quot;&gt;&lt;a href=&quot;#TodoItem组件&quot; class=&quot;headerlink&quot; title=&quot;TodoItem组件&quot;&gt;&lt;/a&gt;TodoItem组件&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TodoItem&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//改变任务是否已完成的状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    handlerChange() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; isDone = !&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.isDone;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.changeTodoState(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.index, isDone);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 鼠标移入事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    handlerMouseOver() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        React.findDOMNode(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).style.background = &lt;span class=&quot;string&quot;&gt;&#39;#eee&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        React.findDOMNode(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.refs.delButton).style.display = &lt;span class=&quot;string&quot;&gt;&#39;inline-block&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    handlerMouseOut() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        React.findDOMNode(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).style.background = &lt;span class=&quot;string&quot;&gt;&#39;#fff&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        React.findDOMNode(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.refs.delButton).style.display = &lt;span class=&quot;string&quot;&gt;&#39;none&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 删除当前任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    handlerDelete()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.deleteTodo(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; className = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.isDone ? &lt;span class=&quot;string&quot;&gt;&#39;task-done&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onMouseOver&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handlerMouseOver.bind(this)&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onMouseOut&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handlerMouseOut.bind(this)&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.props.isDone&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onChange&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handlerChange.bind(this)&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;className&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;this.props.text&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;delButton&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn btn-danger&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handlerDelete.bind(this)&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;删除&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TodoItem有这四个方法，我们主要看看新出现的几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;React.findDOMNode(this)&lt;/code&gt;可以获取当前这个组件标签。&lt;/li&gt;
&lt;li&gt;在元素中定义&lt;code&gt;ref=xxx&lt;/code&gt;属性，就可以通过&lt;code&gt;React.findDOMNode(this.refs.xxx)&lt;/code&gt;获取到这个元素。&lt;/li&gt;
&lt;li&gt;给元素定义class类名的时候要使用&lt;code&gt;className&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;TodoFooter组件&quot;&gt;&lt;a href=&quot;#TodoFooter组件&quot; class=&quot;headerlink&quot; title=&quot;TodoFooter组件&quot;&gt;&lt;/a&gt;TodoFooter组件&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TodoFooter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//改变任务是否已完成的状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    handlerSelectAll(e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.changeTodoState(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, e.target.checked, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// true表示全部操作。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//删除全部已完成的任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    handlerDeleteDone() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.clearDone();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;todo-footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.props.isAllChecked&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onChange&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handlerSelectAll.bind(this)&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;全选&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text-success&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;已完成&amp;#123;this.props.todoDoneCount&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; / 全部&amp;#123;this.props.todoCount&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn btn-danger&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handlerDeleteDone.bind(this)&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;清除已完成任务&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;todoFooter组件主要用来批量更改状态和清除已完成的任务，还要显示任务完成情况，所以代码很简单了。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;回过头来再看看这个demo的实现过程，react组件化的思想让我们编写代码的时候思维清晰，便于阅读。我们通过父组件来控制状态，并通过props传递，来保证组件内的状态一致，并且我们可以清晰的看到某一个方法该由谁来维护。这是一种全新的前端编码体验，相信以后会成为主流。&lt;/p&gt;
&lt;p&gt;另外，我们看到代码中，html直接嵌到js中了，这就是React提出的一种叫JSX的语法。其实入门react本身还是很简单，只是很多人看到JSX和ES6的语法，就打了退堂鼓了，因为我们被代码分离”洗脑”太久了。其实，它们就好像是一堵墙，要是我们畏惧这个障碍止步不前，那么只能停留在原地，如果我们骨气勇气爬上去，才发现react的风景真的很优美！&lt;/p&gt;
&lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.reqianduan.com/2297.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.reqianduan.com/2297.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/react-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wiki.jikexueyuan.com/project/react-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/564151c1f1df1210001c9161&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gank.io/post/564151c1f1df1210001c9161&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;React 的核心思想是：封装组件，各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近前端界闹的沸沸扬扬的技术当属&lt;code&gt;react&lt;/code&gt;了，加上项目需要等等原因，自己也决定花些时间来好好认识下这个东西。然后学习的时候顺便花时间写了一个demo：&lt;code&gt;react-todos&lt;/code&gt;， 为了提起兴趣，你可以先&lt;a href=&quot;http://luckykun.com/work/2016-05-08/react-todo.html&quot;&gt;点这里去看react-todo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先react值得拍手称赞的是它所有的开发都基于&lt;code&gt;组件（component）&lt;/code&gt;，然后组件和组件之间通过props传递方法，每个组件都有一个&lt;code&gt;状态（state）&lt;/code&gt;，当某个方法改变了这个状态值时，整个组件就会&lt;code&gt;重绘&lt;/code&gt;，从而达到刷新。另外，说到重绘就要提到&lt;code&gt;虚拟dom&lt;/code&gt;了，就是用js模拟dom结构，等整个组件的dom更新完毕，才渲染到页面，简单来说只更新了相比之前改变了的部分，而不是全部刷新，所以效率很高。&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客进阶－相册和独立域名</title>
    <link href="http://yoursite.com/work/2016-05-20/hexo-advance.html"/>
    <id>http://yoursite.com/work/2016-05-20/hexo-advance.html</id>
    <published>2016-05-20T15:11:51.000Z</published>
    <updated>2016-05-21T15:55:46.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;之前我已经写了一篇文章详细的讲述了如何使用hexo搭建github博客。如果还没有看的可以去看看，&lt;a href=&quot;/work/2016-04-23/heoll-hexo.html&quot;&gt;hexo搭建博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实，根据这篇文章的过程我们就能够搭建一个专属于自己，并且非常美观的博客了。但是如果你像我一样喜欢折腾，喜欢做到极致，比如添加打赏，添加文章导航，以及文章阅读次数，这些都很简单，按照主题文件的模版一点点修改，就能实现自己想要的效果了。&lt;/p&gt;
&lt;p&gt;这篇文章主要记录我折腾的两个功能： &lt;code&gt;相册&lt;/code&gt;和&lt;code&gt;独立域名&lt;/code&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;相册&quot;&gt;&lt;a href=&quot;#相册&quot; class=&quot;headerlink&quot; title=&quot;相册&quot;&gt;&lt;/a&gt;相册&lt;/h1&gt;&lt;p&gt;首先，看看我们实现后的效果，&lt;a href=&quot;http://luckykun.com/photos/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里看我的相册&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;然后我们分析一下，想要获取相册图片，首先得拿到图片得线上地址，其次，我们可以想到，既然我们的博客内容都放在了github得服务器，那么图片又何尝不能呢？&lt;/p&gt;
&lt;p&gt;使用hexo搭建博客的同学都知道，github上会建立一个名为&lt;code&gt;username.github.io&lt;/code&gt;的仓库，而且仓库只存储了整个项目的一部分（source文件夹的内容），而且貌似这个仓库有大小限制，总之就是说不能把图片放在这个仓库里。&lt;/p&gt;
&lt;p&gt;我们再考虑另一个问题，假如我们有一天需要在另一台电脑写博客怎么办？所以博客备份就是需要的了。那么好，我们在Github 上再建一个仓库，用来存储整个博客项目的文件，假如某一天换个环境，直接全部down下来，就能拿到所有文章的源文件了，所以正好，我们可以在根目录下新建一个photos文件夹用来存放相册需要展示的图片文件了。&lt;/p&gt;
&lt;p&gt;ok，分析结束，敲定技术方案： 我们新建文件夹photos用来存放图片文件，然后新建一个基于nodejs的js文件用来读取所有图片再生成一个json接口文件供相册页面的js文件使用。&lt;/p&gt;
&lt;h2 id=&quot;存放照片&quot;&gt;&lt;a href=&quot;#存放照片&quot; class=&quot;headerlink&quot; title=&quot;存放照片&quot;&gt;&lt;/a&gt;存放照片&lt;/h2&gt;&lt;p&gt;在博客的根目录下创建一个&lt;code&gt;photos&lt;/code&gt;的文件夹，里面存放你想要展示的照片文件。然后把整个项目部署到github上，才能访问到图片的线上地址。&lt;/p&gt;
&lt;h2 id=&quot;生成json文件&quot;&gt;&lt;a href=&quot;#生成json文件&quot; class=&quot;headerlink&quot; title=&quot;生成json文件&quot;&gt;&lt;/a&gt;生成json文件&lt;/h2&gt;&lt;p&gt;在根目录下创建一个nodejs文件&lt;code&gt;tool.js&lt;/code&gt;，内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;string&quot;&gt;&quot;./photos/&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fs.readdir(path, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, files&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;iterator&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index == files.length) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            fs.writeFile(&lt;span class=&quot;string&quot;&gt;&quot;./source/photos/data.json&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(arr, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\t&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;get img success!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fs.stat(path + files[index], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, stats&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stats.isFile()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                arr.push(files[index]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            iterator(index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行这个文件&lt;code&gt;node tool.js&lt;/code&gt;，运行之后，会在&lt;code&gt;/source/photos/&lt;/code&gt;目录下创建一个data.json文件，内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0011.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0019.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0020.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0022.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0045.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0099.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0106.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0191.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0306.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0438.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0451.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0648.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0670.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_0842.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_1078.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_1239.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_1429.JPG&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;IMG_1634.JPG&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次修改photos文件夹里的照片，都得运行一下这个js文件，以更新生成的data.json文件。&lt;/p&gt;
&lt;h2 id=&quot;创建相册页面&quot;&gt;&lt;a href=&quot;#创建相册页面&quot; class=&quot;headerlink&quot; title=&quot;创建相册页面&quot;&gt;&lt;/a&gt;创建相册页面&lt;/h2&gt;&lt;p&gt;在根目录下执行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo page photos&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会在&lt;code&gt;source/photos&lt;/code&gt;目录下生成一个index.md文件，编辑文件内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;link type=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; href=&lt;span class=&quot;string&quot;&gt;&quot;/fancybox/jquery.fancybox.css&quot;&lt;/span&gt; rel=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;instagram&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;archives album&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img-box-ul&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;修改themes-yilia-js-photo-js：&quot;&gt;&lt;a href=&quot;#修改themes-yilia-js-photo-js：&quot; class=&quot;headerlink&quot; title=&quot;修改themes/yilia/js/photo.js：&quot;&gt;&lt;/a&gt;修改&lt;code&gt;themes/yilia/js/photo.js&lt;/code&gt;：&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;init: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; that = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $.getJSON(&lt;span class=&quot;string&quot;&gt;&quot;/photos/data.json&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        that.render(that.page, data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        that.scroll(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;page, data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; begin = (page - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.offset;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; end = page * &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.offset;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (begin &amp;gt;= data.length) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; html, li = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = begin; i &amp;lt; end &amp;amp;&amp;amp; i &amp;lt; data.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        li += &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li&amp;gt;&amp;lt;div class=&quot;img-box&quot;&amp;gt;&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;a class=&quot;img-bg&quot; rel=&quot;example_group&quot; href=&quot;https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/&#39;&lt;/span&gt; + data[i] + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;img lazy-src=&quot;https://raw.githubusercontent.com/jarson7426/blog-back-up/master/photos/&#39;&lt;/span&gt; + data[i] + &lt;span class=&quot;string&quot;&gt;&#39;&quot; /&amp;gt;&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/li&amp;gt;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&quot;.img-box-ul&quot;&lt;/span&gt;).append(li);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&quot;.img-box-ul&quot;&lt;/span&gt;).lazyload();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&quot;a[rel=example_group]&quot;&lt;/span&gt;).fancybox();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述文件读取json文件，将图片的线上url拼接起来渲染在页面上，相册样式使用yilia主题提供。然后上传这些文件，根据自定义的路径访问url，就能看到相册了。那么，到这里就基本完成了相册的制作。&lt;/p&gt;
&lt;h1 id=&quot;独立域名&quot;&gt;&lt;a href=&quot;#独立域名&quot; class=&quot;headerlink&quot; title=&quot;独立域名&quot;&gt;&lt;/a&gt;独立域名&lt;/h1&gt;&lt;p&gt;到目前为止，我们的博客都是使用github分配的二级域名&lt;code&gt;luckykun.github.io&lt;/code&gt;来访问的， 那么我们会想如果能自己设置个域名，是多么cool的事！要怎么办呢？那就继续往下看吧！&lt;/p&gt;
&lt;h2 id=&quot;购买域名&quot;&gt;&lt;a href=&quot;#购买域名&quot; class=&quot;headerlink&quot; title=&quot;购买域名&quot;&gt;&lt;/a&gt;购买域名&lt;/h2&gt;&lt;p&gt;去卖域名的网站去买一个域名，我是在&lt;a href=&quot;https://wanwang.aliyun.com/domain/searchresult/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;万网&lt;/a&gt;买的域名，如图所示： &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/dmain.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;找到自己喜欢的域名，购买就好了。&lt;/p&gt;
&lt;h2 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h2&gt;&lt;p&gt;有了自己的域名之后，luckykun.github.io替换成luckykun.com，只要设置下解析即可，进入万网的云解析页面，添加如下解析： &lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/domain22.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;code&gt;192.30.252.154&lt;/code&gt;和&lt;code&gt;192.30.252.153&lt;/code&gt;是github服务器对应的ip地址，这步一定要设置，否则访问不了。&lt;/p&gt;
&lt;h2 id=&quot;添加CNAME&quot;&gt;&lt;a href=&quot;#添加CNAME&quot; class=&quot;headerlink&quot; title=&quot;添加CNAME&quot;&gt;&lt;/a&gt;添加CNAME&lt;/h2&gt;&lt;p&gt;然后回到博客项目根目录，在&lt;code&gt;source/&lt;/code&gt;下新建一个名为&lt;code&gt;CNAME&lt;/code&gt;的文件，里面的内容写入&lt;code&gt;luckykun.com&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;然后在浏览器输入luckykun.com，即可代替之前的github.io的域名，访问到自己的博客页面了。实在是台、太cool了！&lt;/p&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;好的，文章写道这里就结束了，感谢大家的阅读，如果文章能给大家带来帮助就最好了，如果读者还有任何疑问，欢迎留言，我会尽力解答。再见啦～～&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;之前我已经写了一篇文章详细的讲述了如何使用hexo搭建github博客。如果还没有看的可以去看看，&lt;a href=&quot;/work/2016-04-23/heoll-hexo.html&quot;&gt;hexo搭建博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实，根据这篇文章的过程我们就能够搭建一个专属于自己，并且非常美观的博客了。但是如果你像我一样喜欢折腾，喜欢做到极致，比如添加打赏，添加文章导航，以及文章阅读次数，这些都很简单，按照主题文件的模版一点点修改，就能实现自己想要的效果了。&lt;/p&gt;
&lt;p&gt;这篇文章主要记录我折腾的两个功能： &lt;code&gt;相册&lt;/code&gt;和&lt;code&gt;独立域名&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo系列" scheme="http://yoursite.com/tags/hexo%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>我的世界，就是一张床</title>
    <link href="http://yoursite.com/simomo/2016-05-14/simomo02.html"/>
    <id>http://yoursite.com/simomo/2016-05-14/simomo02.html</id>
    <published>2016-05-14T14:54:48.000Z</published>
    <updated>2016-05-15T08:58:40.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;距离我的烫伤（5.6日晚），已经过去一周啦。还是刚烫伤时的脚最好看，现在的脚啊，就是半熟的肉，也不知道我脚背上肉少，是好事还是没什么影响。大写的心疼！&lt;/p&gt;
&lt;p&gt;另外，还有点恶心……&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我不由地深思，之前一位朋友跟我提过，本命年不能剪头发，然而我，刚剪了短发没多久……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/simomo222.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;（啧啧啧，细思极恐啊！）&lt;/p&gt;
&lt;p&gt;常在河边走，哪能不湿脚。&lt;br&gt;老马失蹄。&lt;br&gt;不是不报，时候未到……&lt;br&gt;还有什么形容语&lt;em&gt;__&lt;/em&gt;？&lt;/p&gt;
&lt;p&gt;星期四换药的时候在医院碰见了一个刚烫伤的妹纸，被一个男人公主抱送进来的呢 [羡慕状]，也是脚，不过是右脚，好像没我的严重，重点是医生给她上药的时候：&lt;/p&gt;
&lt;p&gt;她竟然！没！有！用！麻！药！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/simomo1111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本来今天下午应该去换药的，但是任性的我，再加一个一心想打球的某人 [鄙视状]，所以最终决定明天一大早去换药（说得好像我起得来一样……）&lt;/p&gt;
&lt;p&gt;此次受伤了以后，我才知道，原来一张床，我也可以过完一天又一天的日子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/simomo333.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;（本宝宝木有床zhao，你们将就将就看这个吧~）&lt;/p&gt;
&lt;p&gt;一张床，一张桌，&lt;br&gt;桌下还有插线板，&lt;br&gt;旁边就是电饭煲，&lt;br&gt;还有我的一箱干粮&lt;br&gt;八宝粥、麦片、奶干、萨琪玛、火腿肠、肉松卷、山楂片——有助消化，外加几颗水果&lt;br&gt;要是马桶能搬过来……&lt;br&gt;我真的可以就在半径1.5米以内生存了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/simomo444.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的难过之处就在于：脚呢，要一直放平或抬高，就是不能吊着或下垂，不然有种充血、肿胀的疼。&lt;br&gt;久了，腰就会酸啦，有时候韧带也会酸的。&lt;/p&gt;
&lt;p&gt;其实，最难受的是去卫生间的时候啊,我现在真是无比庆幸家里是马桶啊，马桶马桶，我爱你……。&lt;br&gt;先是洗漱时，你要靠右脚站立，但是左脚呢，又必须抬高，于是乎，就有了一种瑜伽既视感。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/simomo555.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;（坚持久了，腰会疼，所以是暴风洗漱~）&lt;/p&gt;
&lt;p&gt;要是身体再倾斜一点点，就变成了汪星人标记领土的动作既视感了。&lt;br&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/simomo666.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;写到这里，由于打球的某人带回来了好吃的，所以就随性的结束啦。&lt;/p&gt;
&lt;p&gt;改天再唠！（等着）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/simomo777.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;距离我的烫伤（5.6日晚），已经过去一周啦。还是刚烫伤时的脚最好看，现在的脚啊，就是半熟的肉，也不知道我脚背上肉少，是好事还是没什么影响。大写的心疼！&lt;/p&gt;
&lt;p&gt;另外，还有点恶心……&lt;/p&gt;
    
    </summary>
    
      <category term="丝茉茉" scheme="http://yoursite.com/categories/simomo/"/>
    
    
  </entry>
  
  <entry>
    <title>简单封装微信分享插件</title>
    <link href="http://yoursite.com/work/2016-05-14/weixin-share.html"/>
    <id>http://yoursite.com/work/2016-05-14/weixin-share.html</id>
    <published>2016-05-14T02:33:46.000Z</published>
    <updated>2016-05-21T15:49:36.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;最近要慢慢开始做移动端的一些页面了，并且大多数都是活动页面，需要在微信里面分享、传播。&lt;/p&gt;
&lt;p&gt;如果只是单单传播一下页面，扩散一些信息还好，那就跟pc差不多，一刀一刀切页面就完了。。。但是我们在传播的时候往往需要分享出去，并且自定义传播信息的标题、链接或者图片，有时候一些小游戏还需要获取用户的信息等等，那么，就需要调用微信分享的接口了…&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我跟着&lt;a href=&quot;http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信官方文档&lt;/a&gt;开发了两次，其实如果搞清楚了流程，本身步骤也还算简单。但是我发现每次要写很多重复的代码，并且因为时间间隔，每次开发的时候又要重新看看文档，才能回忆起该怎么调用＝＝，所以我写这个微信分享的小插件，就是为了自己以后再做这样的需求时，分分钟搞定。顺便在这里做一个简单的记录，如果文中有错，欢迎大家指出^_^。&lt;/p&gt;
&lt;h1 id=&quot;使用条件&quot;&gt;&lt;a href=&quot;#使用条件&quot; class=&quot;headerlink&quot; title=&quot;使用条件&quot;&gt;&lt;/a&gt;使用条件&lt;/h1&gt;&lt;p&gt;首先解释一下，这里的使用条件，不是说插件的使用条件，而是调用微信分享接口的使用条件。&lt;/p&gt;
&lt;p&gt;不是每个人随便写个页面都能拿到微信里，互相传播，让用户授权，获取用户信息的。你需要拥有一个已经认证过的微信公众号，进入”公众号设置”的”功能设置”里填写”JS接口安全域名”，来绑定一个能访问的域名，另外还需要一个与公众号对应的唯一的appId，这个id能从公众号后台查看。&lt;/p&gt;
&lt;h1 id=&quot;调用过程&quot;&gt;&lt;a href=&quot;#调用过程&quot; class=&quot;headerlink&quot; title=&quot;调用过程&quot;&gt;&lt;/a&gt;调用过程&lt;/h1&gt;&lt;p&gt;其实使用的过程在微信官方文档中已经说的非常清楚了，但是其中其实有很多的都是我们用不到的，所以我把分享页面的开发过程再简单的总结一遍:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入官方分享需要的js文件：&lt;a href=&quot;http://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot; target=&quot;_blank&quot;&gt;http://res.wx.qq.com/open/js/jweixin-1.0.0.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;调用后台接口，获取签名信息(服务端提供)。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有需要使用JS-SDK的页面必须先注入配置信息，如下配置之后(signature,nonceStr,timestamp就是上一步获取到的信息)，方能调用分享接口。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wx.config(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    debug: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,    &lt;span class=&quot;comment&quot;&gt;//开启调试模式，会实时的提示信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    appId: self.config.appId, &lt;span class=&quot;comment&quot;&gt;// 必填，公众号的唯一标识&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    timestamp: d.timestamp, &lt;span class=&quot;comment&quot;&gt;// 必填，生成签名的时间戳&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    nonceStr: d.conststr, &lt;span class=&quot;comment&quot;&gt;// 必填，生成签名的随机串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    signature: d.signature,&lt;span class=&quot;comment&quot;&gt;// 必填，签名，见附录1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    jsApiList: [&lt;span class=&quot;string&quot;&gt;&#39;onMenuShareTimeline&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;onMenuShareAppMessage&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果上一步的配置有错，则执行：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wx.error(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      alert(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果配置成功，则执行&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wx.ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在配置成功的回调函数里，即可调用分享的函数了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wx.ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    wx.onMenuShareTimeline(&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//分享到朋友圈&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        title: ‘标题’,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link: &lt;span class=&quot;string&quot;&gt;&#39;http://www.taobao.com&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        imgUrl: &lt;span class=&quot;string&quot;&gt;&#39;imgurl&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.config.circleFunction();      &lt;span class=&quot;comment&quot;&gt;// 分享成功的回调函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cancel: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 取消分享&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    wx.onMenuShareAppMessage(&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//分享给朋友&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        title: self.config.title,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link: self.config.link,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        desc: &lt;span class=&quot;string&quot;&gt;&#39;为什么这里没有起作用？？&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        imgUrl: self.config.imgUrl,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.config.friendFunction();         &lt;span class=&quot;comment&quot;&gt;// 分享成功的回调函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cancel: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 取消分享&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;值得一提的是，这里用到的函数，都需要在配置项的&amp;#39;jsAplilist&amp;#39;中添加进去。&lt;/code&gt; jsApiList: [‘onMenuShareTimeline’, ‘onMenuShareAppMessage’]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;插件代码&quot;&gt;&lt;a href=&quot;#插件代码&quot; class=&quot;headerlink&quot; title=&quot;插件代码&quot;&gt;&lt;/a&gt;插件代码&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WxShare&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;conf&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getURLParam = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;decodeURIComponent&lt;/span&gt;((&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;[?|&amp;amp;]&#39;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;([^&amp;amp;;]+?)(&amp;amp;|#|;|$)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ig&quot;&lt;/span&gt;).exec(location.search) || [, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;])[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;regexp&quot;&gt;/\+/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;%20&#39;&lt;/span&gt;)) || &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.config = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        appId: conf &amp;amp;&amp;amp; conf.appId || &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url: conf &amp;amp;&amp;amp; conf.url || &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,   &lt;span class=&quot;comment&quot;&gt;//接口地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        data: &amp;#123;    &lt;span class=&quot;comment&quot;&gt;//接口的参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            code: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getURLParam(&lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            state: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getURLParam(&lt;span class=&quot;string&quot;&gt;&#39;state&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            url: location.href.split(&lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],   &lt;span class=&quot;comment&quot;&gt;// zepto 自动编码对location.href进行encodeURIComponent编码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            method: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        imgUrl: conf &amp;amp;&amp;amp; conf.imgUrl || &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        title: conf &amp;amp;&amp;amp; conf.title || &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link: conf &amp;amp;&amp;amp; conf.link || &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        desc: conf &amp;amp;&amp;amp; conf.desc || &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        circleFunction: conf &amp;amp;&amp;amp; conf.circleFunction || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        friendFunction: conf &amp;amp;&amp;amp; conf.friendFunction || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        callback: conf &amp;amp;&amp;amp; conf.callback || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;d&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.init();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WxShare.prototype.init = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;//获取用户信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url: self.config.url,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        data: self.config.data,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dataType: &lt;span class=&quot;string&quot;&gt;&#39;jsonp&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        jsonp: &lt;span class=&quot;string&quot;&gt;&#39;callback&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;d&lt;/span&gt;) &lt;/span&gt;&amp;#123;    &lt;span class=&quot;comment&quot;&gt;// 成功获取到用户信息，然后配置sdk&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.config.callback(d);   &lt;span class=&quot;comment&quot;&gt;//处理用户信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            wx.config(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                debug: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                appId: self.config.appId, &lt;span class=&quot;comment&quot;&gt;// 必填，公众号的唯一标识&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                timestamp: d.timestamp, &lt;span class=&quot;comment&quot;&gt;// 必填，生成签名的时间戳&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                nonceStr: d.conststr, &lt;span class=&quot;comment&quot;&gt;// 必填，生成签名的随机串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                signature: d.signature,&lt;span class=&quot;comment&quot;&gt;// 必填，签名，见附录1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                jsApiList: [&lt;span class=&quot;string&quot;&gt;&#39;onMenuShareTimeline&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;onMenuShareAppMessage&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            wx.ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                wx.onMenuShareTimeline(&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//分享到朋友圈&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    title: self.config.title,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    link: self.config.link,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    imgUrl: self.config.imgUrl,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        self.config.circleFunction();      &lt;span class=&quot;comment&quot;&gt;// 确认分享&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    cancel: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;// 取消分享&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                wx.onMenuShareAppMessage(&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//分享给朋友&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    title: self.config.title,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    link: self.config.link,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    desc: self.config.desc,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    imgUrl: self.config.imgUrl,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        self.config.friendFunction();         &lt;span class=&quot;comment&quot;&gt;// 确认分享&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    cancel: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;// 取消分享&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;a, b, c&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// alert(&#39;error&#39;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为我最常见的就是分享朋友圈和分享给朋友这两个需求，所以插件只是实现了这样个功能，官方文档中还有其他很多功能强大的接口，比如分享到微博，分享到qq等等，大家如果有需要，可以自行添加。&lt;/li&gt;
&lt;li&gt;另外，分享给朋友这个接口还有一些配置项因为不常用，也没有列出来，比如：文件类型type，文件链接dataUrl（如果类型为音乐或视频）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;使用文档&quot;&gt;&lt;a href=&quot;#使用文档&quot; class=&quot;headerlink&quot; title=&quot;使用文档&quot;&gt;&lt;/a&gt;使用文档&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; linkUrl = &lt;span class=&quot;string&quot;&gt;&#39;https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx60d2d83ca82005ec&amp;amp;redirect_uri=&#39;&lt;/span&gt;+ location.href +&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;response_type=code&amp;amp;scope=snsapi_userinfo&amp;amp;state=STATE#wechat_redirect&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wxShare = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WxShare(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    appId: &lt;span class=&quot;string&quot;&gt;&#39;xxxxxxxxxxxxxxxxxx&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url: url,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    imgUrl: &lt;span class=&quot;string&quot;&gt;&#39;http://pic24.nipic.com/20120831/10132780_100453579000_2.jpg&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    title: &lt;span class=&quot;string&quot;&gt;&#39;这是分享出去的标题&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    desc: &lt;span class=&quot;string&quot;&gt;&#39;这是发送给朋友的描述信息&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    link: linkUrl,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    circleFunction: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    callback: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;//处理获得的用户信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $(&lt;span class=&quot;string&quot;&gt;&#39;.page1 .logo&#39;&lt;/span&gt;).html(data.nickname);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appId： 必填，公众号的唯一标识。&lt;/li&gt;
&lt;li&gt;url：后端接口地址（不需要配置接口参数，因为插件已经传入了需要的参数code、state、url、method）。&lt;/li&gt;
&lt;li&gt;imgUrl：分享出去的图片地址。&lt;/li&gt;
&lt;li&gt;title：分享出去的标题。&lt;/li&gt;
&lt;li&gt;link：分享出去的链接（注意：如果希望别人点击你分享的链接也需要授权，则需要微信客户端的链接格式。）&lt;/li&gt;
&lt;li&gt;desc：分享给朋友的的描述信息。&lt;/li&gt;
&lt;li&gt;circleFunction：分享到朋友圈成功的回调函数。&lt;/li&gt;
&lt;li&gt;friendFunction：分享给朋友成功的回调函数。&lt;/li&gt;
&lt;li&gt;callback：参数d(用户信息)，接口调用成功，处理用户信息的回调函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;因为平时用到的只有分享朋友圈和朋友这两个接口，所以这个插件也只是实现了这两个功能。并且标题，链接，图片地址都是公用的。以后如有需要，可以继续增加功能。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;最近要慢慢开始做移动端的一些页面了，并且大多数都是活动页面，需要在微信里面分享、传播。&lt;/p&gt;
&lt;p&gt;如果只是单单传播一下页面，扩散一些信息还好，那就跟pc差不多，一刀一刀切页面就完了。。。但是我们在传播的时候往往需要分享出去，并且自定义传播信息的标题、链接或者图片，有时候一些小游戏还需要获取用户的信息等等，那么，就需要调用微信分享的接口了…&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="微信分享" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>优美的编辑器－Github Atom</title>
    <link href="http://yoursite.com/work/2016-05-13/atom-edit.html"/>
    <id>http://yoursite.com/work/2016-05-13/atom-edit.html</id>
    <published>2016-05-13T02:11:00.000Z</published>
    <updated>2016-05-15T07:18:36.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;周末闲着没事，逛论坛发现了一个新的编辑器，由github发布的Atom编辑器。瞬间被吸引了，所以就去尝试着折腾了一下，后来发现这个编辑器确实很不错，他的特点就是两个字：&lt;code&gt;优美！！！&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载地址，官方网站下载速度太慢太慢了。。。这里有个github的下载地址。要快很多  &lt;a href=&quot;https://github.com/atom/atom/releases/tag/v1.0.19&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载编辑器点这里&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Atom介绍&quot;&gt;&lt;a href=&quot;#Atom介绍&quot; class=&quot;headerlink&quot; title=&quot;Atom介绍&quot;&gt;&lt;/a&gt;Atom介绍&lt;/h1&gt;&lt;p&gt;Github的员工Nathan Sobo在Atom的博客中提到：”Sublime和TextMate十分方便，但是扩展性不足；另一方面，Emacs和 Vim扩展性很强却需要学习日程工作中很少用到的脚本语言。”因此，他们希望找到一个平衡点，于是就有了Atom这个项目。&lt;/p&gt;
&lt;p&gt;Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。它支持各种编程语言的代码高亮(&lt;code&gt;HTML&lt;/code&gt; / &lt;code&gt;CSS&lt;/code&gt; / &lt;code&gt;Javascript&lt;/code&gt; / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / &lt;code&gt;Markdown&lt;/code&gt; 等等)。&lt;/p&gt;
&lt;p&gt;下面是优酷上Atom的宣传片，逼格好高的样子，&lt;code&gt;老奶奶都写会css...&lt;/code&gt;:&lt;/p&gt;
&lt;iframe height=&quot;300&quot; width=&quot;510&quot; src=&quot;http://player.youku.com/embed/XMTI4NTgzNzY0OA==&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;我捣腾了这么久，说说自己的看法吧。作为一个一直使用sublime 编辑器的人来说，转用Atom是非常的简单，Atom和Sublime功能非常相似，很多快捷键都是一样的。虽然他们现有功能差不多，并且sublime更加轻巧，但是我觉得相比于sublime，Atom的优势也很明显，界面更加优美，功能强大，插件使用方便，可扩展性强等等。。。&lt;/p&gt;
&lt;h2 id=&quot;优美&quot;&gt;&lt;a href=&quot;#优美&quot; class=&quot;headerlink&quot; title=&quot;优美&quot;&gt;&lt;/a&gt;优美&lt;/h2&gt;&lt;p&gt;Atom装了expose这个插件之后，mac用户使用&lt;code&gt;shift＋command＋e&lt;/code&gt;组合键可以得到意想不到的酷炫！！下面是截图为证，可以方便的看到每一个文件大概的内容，快速选择已经打开的文件。方便！！！优美！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img4.tbcdn.cn/L1/461/1/165c46ce00a0d55151c8f92f0f1b32f2408caaa0&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;和git完美结合&quot;&gt;&lt;a href=&quot;#和git完美结合&quot; class=&quot;headerlink&quot; title=&quot;和git完美结合&quot;&gt;&lt;/a&gt;和git完美结合&lt;/h2&gt;&lt;p&gt;Atom 编辑器可以和 GIT 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。&lt;/p&gt;
&lt;h2 id=&quot;基于WEB技术构建&quot;&gt;&lt;a href=&quot;#基于WEB技术构建&quot; class=&quot;headerlink&quot; title=&quot;基于WEB技术构建&quot;&gt;&lt;/a&gt;基于WEB技术构建&lt;/h2&gt;&lt;p&gt;和微软发布的Visual Studio Code编辑器一样，Atom 也是基于WEB技术（Chromium+Node.js）开发的，简单理解的话编辑器本身其实是一个跑在本地的网页，这足以让无数 WEB 工程师为之兴奋！用户可以用Javascript来编写编辑器插件，并且github大家都知道，他是Atom的强大后台支撑，这里有着大量的编程爱好者，相信Atom的插件会持续的增多，Atom也会变的越来越优秀。&lt;/p&gt;
&lt;h1 id=&quot;Atom推荐插件&quot;&gt;&lt;a href=&quot;#Atom推荐插件&quot; class=&quot;headerlink&quot; title=&quot;Atom推荐插件&quot;&gt;&lt;/a&gt;Atom推荐插件&lt;/h1&gt;&lt;p&gt;安装插件跟sublime一样，可以在setting界面中，搜索安装，也可以快捷键&lt;code&gt;shift＋command＋p&lt;/code&gt;跳出搜索输入框输入关键字进行安装。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;atom-beautify&lt;/code&gt;:美化代码，格式化代码的插件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;autocomplete-paths&lt;/code&gt;:输入.或者/的时候，会自动提示路径和路径下的文件。非常好用！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;autoprefixer&lt;/code&gt;:css样式的兼容性添加。当写好自己的css之后，会自动添加类似-webkit-等前缀的css样式代码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color-picker&lt;/code&gt;:css中需要赋值颜色的时候，使用这个插件可以看到一个完整的取色器，实时的取色，改变。。。非常方便！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file-icons&lt;/code&gt;:左边工程目录的每一个文件，如果有一个小图标表示就漂亮了，没错，就需要这个插件了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git plus&lt;/code&gt;：当然是为了更好的使用git了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markdown-format，markdown-writer&lt;/code&gt;：如果你不是Mac用户，并且十分喜欢使用markdown来写东西的话，那么你一定会爱上在Atom上写markdown的感觉~~&lt;/p&gt;
&lt;p&gt;&lt;code&gt;linter&lt;/code&gt;: 自动提示你代码中不规范的地方，让你拥有更加规范的代码习惯。如果你想得到完整的信息提示，则推荐这个插件&lt;code&gt;linter-jshint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;minimap&lt;/code&gt;:用过sublime text的同学一定知道右边那方便的缩略图，难道这么好用的工具Atom上会没有吗？不会！这个插件就会让你见到熟悉的缩略图, 而且功能更加强大！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;插件&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minimap-codeglance&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;放大镜的功能，这个插件就会让你的鼠标移动到缩略图上的时候放大显示那边部分的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minimap-find-and-replace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当你想替换单词的时候你会想起&lt;code&gt;ctrl+D&lt;/code&gt;，可以你知道全篇有多少你要替换的字符串吗？通过这个插件你就可以在缩略图上看到所有你选中的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minimap-git-diff&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过这个插件，每当你修改你的代码的时候你就会在缩略图上看到和之前git中的区别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minimap-highlight-selected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当你选中部分代码的时候，它就会高亮的出现在缩略图中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minimap-linter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这个插件让你的缩略图显示的更加漂亮和完整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;expose&lt;/code&gt;:当你一次性打开多个文件的时候也许你会使用分屏来查看，安装了这个插件之后使用&lt;code&gt;shift＋command＋e&lt;/code&gt;就可以分屏查看。截图上面已经出现过，美不美！！！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;atom-material-ui&lt;/code&gt;:这是一个&lt;code&gt;主题插件&lt;/code&gt;,他有自带的一些动态效果，特别酷炫。话不多说，自己试试就知道。&lt;/p&gt;
&lt;p&gt;终于废了老半天时间来搞这个编辑器，不过每装一个插件就能感受其强大的时候，就觉得很值得，下面是我使用这个主题的截图，很漂亮吧？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img1.tbcdn.cn/L1/461/1/f15c17095abedad0dc396aaf30e0a0c84d39bda3&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Atom快捷键&quot;&gt;&lt;a href=&quot;#Atom快捷键&quot; class=&quot;headerlink&quot; title=&quot;Atom快捷键&quot;&gt;&lt;/a&gt;Atom快捷键&lt;/h1&gt;&lt;p&gt;其实Atom和sublime的跨界件非常相似，比如我常用的cmd+d,这里只列出一些常用的快捷键。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+shift+s&lt;/code&gt; 保存所有打开的文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+\&lt;/code&gt; 显示或隐藏目录树&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+b&lt;/code&gt; 在打开的文件之间切换&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+d&lt;/code&gt; 快速查找选中的内容&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+right, ctrl+E&lt;/code&gt; 移动到一行结束&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+left, ctrl+A&lt;/code&gt; 移动到一行开始&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+K, cmd+U&lt;/code&gt; 使当前字符大写&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+K, cmd+L&lt;/code&gt; 使当前字符小写&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+shift+K&lt;/code&gt; 删除当前行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+shift+U&lt;/code&gt; 调出切换编码选项&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+F&lt;/code&gt; 在当前打开的页面中查找&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmd+shift+f&lt;/code&gt; 在整个工程中查找&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+space&lt;/code&gt; 提示补全信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-shift-M&lt;/code&gt; Markdown预览（前提是装了markdown插件）&lt;/p&gt;
&lt;p&gt;如果有需要，大家去看这个链接吧，里面的快捷键总结非常的全面，&lt;a href=&quot;http://www.iplaysoft.com/item/atom-shortcuts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;想看点这里&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;周末闲着没事，逛论坛发现了一个新的编辑器，由github发布的Atom编辑器。瞬间被吸引了，所以就去尝试着折腾了一下，后来发现这个编辑器确实很不错，他的特点就是两个字：&lt;code&gt;优美！！！&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载地址，官方网站下载速度太慢太慢了。。。这里有个github的下载地址。要快很多  &lt;a href=&quot;https://github.com/atom/atom/releases/tag/v1.0.19&quot;&gt;下载编辑器点这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>实例demo之Highextend图表</title>
    <link href="http://yoursite.com/work/2016-05-12/high-extend.html"/>
    <id>http://yoursite.com/work/2016-05-12/high-extend.html</id>
    <published>2016-05-12T04:11:51.000Z</published>
    <updated>2016-05-29T04:37:20.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;header style=&quot;margin-top:-55px;text-align:center&quot;&gt;&lt;br&gt;    &lt;p style=&quot;font-size: 1.5em;margin-top: 30px;&quot;&gt;&lt;span&gt;highextend图表实例&lt;/span&gt;&lt;a href=&quot;https://github.com/luckykun/highextend&quot; style=&quot;font-size:14px;font-weight:normal;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view on github&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;/header&gt;

&lt;p&gt;highextend是基于highcharts进一步封装的图表组件，组件暴露一个&lt;code&gt;Hxt&lt;/code&gt;的全局对象，它有以下一些方法来绘制不同类的图形，从此以后，画图只需简简单单的几行配置就ok了！赶紧点进来看看实例吧！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Hxt.line(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//渲染默认折线图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.spline(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//曲线图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.scatter(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//散点图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.bubble(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//bubble图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.column(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//柱状图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.bar(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//bar图，（横向柱状图）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.area(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//区域图（默认为平滑区域图）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.pie(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//圆饼图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.polar(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//雷达图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.pyramid(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//金字塔图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.mix(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//混合图&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;实例展示&quot;&gt;&lt;a href=&quot;#实例展示&quot; class=&quot;headerlink&quot; title=&quot;实例展示&quot;&gt;&lt;/a&gt;实例展示&lt;/h1&gt;&lt;div class=&quot;high-extend-container&quot;&gt;&lt;br&gt;    &lt;div class=&quot;chart&quot; id=&quot;line-chart&quot;&gt;&lt;/div&gt;&lt;br&gt;    &lt;div class=&quot;chart&quot; id=&quot;area-chart&quot;&gt;&lt;/div&gt;&lt;br&gt;    &lt;div class=&quot;chart&quot; id=&quot;column-chart&quot;&gt;&lt;/div&gt;&lt;br&gt;    &lt;div class=&quot;chart&quot; id=&quot;mix-chart&quot;&gt;&lt;/div&gt;&lt;br&gt;    &lt;div class=&quot;small-chart&quot; id=&quot;pie-chart1&quot;&gt;&lt;/div&gt;&lt;br&gt;    &lt;div class=&quot;small-chart&quot; id=&quot;pie-chart2&quot; style=&quot;margin-top:-28px;&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用文档&quot;&gt;&lt;a href=&quot;#使用文档&quot; class=&quot;headerlink&quot; title=&quot;使用文档&quot;&gt;&lt;/a&gt;使用文档&lt;/h1&gt;&lt;p&gt;本页面的实例不全，读者可以在&lt;a href=&quot;https://github.com/luckykun/highextend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的github&lt;/a&gt;上访问到这个项目的所有代码，然后down下来执行以下代码就能直接在浏览器看到所有实例。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install   &lt;span class=&quot;comment&quot;&gt;//安装依赖&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp   &lt;span class=&quot;comment&quot;&gt;//启动服务&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面介绍的方法中，有&lt;code&gt;elem&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;options&lt;/code&gt;三个参数，下面依次介绍以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elem：绘制图表元素的id。&lt;/li&gt;
&lt;li&gt;data：图表的数据。&lt;/li&gt;
&lt;li&gt;options：图表配置项,&lt;code&gt;可以为空，为空则使用默认配置。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;公共配置项&quot;&gt;&lt;a href=&quot;#公共配置项&quot; class=&quot;headerlink&quot; title=&quot;公共配置项&quot;&gt;&lt;/a&gt;公共配置项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;emptyHtml&lt;/code&gt;: 数据为空时的提示信息，支持html格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;backgroundColor&lt;/code&gt;: 图表背景颜色，默认为’白色‘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;marginTop&lt;/code&gt;: 图形的上边距，例如 marginTop: 60。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;marginRight&lt;/code&gt;: 图形的上边距，例如 marginRight: 60。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;chartLoad&lt;/code&gt;: 设置图形加载方式。一般实时动态数据会配置此项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;colors&lt;/code&gt;: 颜色，&lt;code&gt;类型为数组&lt;/code&gt;。非必选，有默认的颜色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;title&lt;/code&gt;: 图表标题，默认为空。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;subtitle&lt;/code&gt;: 副标题，默认为空。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;markerEnabled&lt;/code&gt;: 是否显示线条上的点，默认&lt;code&gt;true&lt;/code&gt;为显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;markerSymbol&lt;/code&gt;: 线条上点的形状，默认为‘circle’圆形，并且默认样式为空心。其他值有‘square’，‘diamond’，‘triangle’等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;legendEnabled&lt;/code&gt;: 图例是否显示，默认为&lt;code&gt;true&lt;/code&gt;，显示图例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;legendLayout&lt;/code&gt;: 图例显示方式，默认为水平方向：‘horizontal’。 ‘vertical’为垂直方向。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;legendAlign&lt;/code&gt;: 水平方向显示位置，默认中间位置：‘center’，其他值有‘right’，‘left’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;legendVerticalAlign&lt;/code&gt;: 垂直方向显示位置，默认‘bottom’，其他值有‘top’，‘middle’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;legendItemMarginBottom&lt;/code&gt;: 每个图例的下边距，默认为4px。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shared&lt;/code&gt;: tooltip提示框是否被共享。默认为&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;valuePrefix&lt;/code&gt;: tooltip悬浮框value值前面的字符，默认为空。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;valueSuffix&lt;/code&gt;: tooltip悬浮框value值后面的字符，默认为空。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;xDateFormat&lt;/code&gt;: tooltip中时间转化格式，默认为‘%Y-%m-%d’，即‘2016-01-10’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;chartLabel&lt;/code&gt;： 图形中的提示文案，格式为对象，如：{html:’title’, style:{left:’30px’, top: ‘5px’}}。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;线图-柱状图配置项&quot;&gt;&lt;a href=&quot;#线图-柱状图配置项&quot; class=&quot;headerlink&quot; title=&quot;线图/柱状图配置项&quot;&gt;&lt;/a&gt;线图/柱状图配置项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Xtype&lt;/code&gt;: 横坐标类型，默认为空。&lt;code&gt;如设置&amp;#39;datetime&amp;#39;，则为时间类型，默认转为&amp;#39;01-01&amp;#39;格式&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ytitle&lt;/code&gt;: 纵坐标标题，默认为空。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ytype&lt;/code&gt;: 纵坐标类型，默认为空。&lt;code&gt;如设置&amp;#39;rate&amp;#39;,则用1024为单位计算，且默认单位为‘kb’，大于1024单位变为‘M’&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;饼图配置项&quot;&gt;&lt;a href=&quot;#饼图配置项&quot; class=&quot;headerlink&quot; title=&quot;饼图配置项&quot;&gt;&lt;/a&gt;饼图配置项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;size&lt;/code&gt;: 饼图的整体大小（百分比），默认为100%。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;innerSize&lt;/code&gt;: 内圆所占的百分比，默认为55%。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;showInLegend&lt;/code&gt;: 设置圆饼图的图例是否显示，默认为&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;startAngle&lt;/code&gt;: 圆饼图的开始角度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;endAngle&lt;/code&gt;: 圆饼图的结束角度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pieLabel&lt;/code&gt;: 设置圆饼图的series文案，默认为&lt;code&gt;数量&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pieClick&lt;/code&gt;: 圆饼图的点击事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pieMouseOut&lt;/code&gt;: 圆饼图的mouseout事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pieMouseOver&lt;/code&gt;: 圆饼图的mouseover事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;雷达图配置项&quot;&gt;&lt;a href=&quot;#雷达图配置项&quot; class=&quot;headerlink&quot; title=&quot;雷达图配置项&quot;&gt;&lt;/a&gt;雷达图配置项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;polarType&lt;/code&gt;: 雷达图的形状，可设置为‘circle’－圆形，默认为‘polygon’－菱形。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;polarSize&lt;/code&gt;: 雷达图大小百分比，默认95%。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;正负对比图（bar）配置项&quot;&gt;&lt;a href=&quot;#正负对比图（bar）配置项&quot; class=&quot;headerlink&quot; title=&quot;正负对比图（bar）配置项&quot;&gt;&lt;/a&gt;正负对比图（bar）配置项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;barStacking&lt;/code&gt;: 设置为“normal”－表示正负对比图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;混合图特有配置项&quot;&gt;&lt;a href=&quot;#混合图特有配置项&quot; class=&quot;headerlink&quot; title=&quot;混合图特有配置项&quot;&gt;&lt;/a&gt;混合图特有配置项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mixPieCenter&lt;/code&gt;: 混合图中饼图的特有设置–中心原点坐标，如[100,50]。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mixPieSize&lt;/code&gt;: 混合图中饼图的特有设置–饼图大小，默认为‘60%’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mixPieInnerSize&lt;/code&gt;: 混合图中饼图的特有设置–饼图空心圆大小，默认为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;miePieShowInLegend&lt;/code&gt;: 混合图中饼图的特有设置–是否显示legend，默认为false。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;style&gt;
.high-extend-container {
    min-height: 400px;
    overflow: hidden;
}
.high-extend-container .chart {
    background: #f5f5f5;
    padding: 10px;
    width: 90%;
    height: 280px;
}
.high-extend-container .small-chart {
    padding: 10px;
    background: #f5f5f5;
    width: 360px;
    height: 340px;
    float: left;
    margin-right: 30px;
    margin-bottom: 20px;
    display: inline-block;
}
&lt;/style&gt;

&lt;script src=&quot;http://cdn.hcharts.cn/highcharts/highcharts.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://rawgit.com/luckykun/highextend/daily/0.0.1/build/js/highextend-min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var lineData = {
        &quot;items&quot;: [{
            &quot;data&quot;: [100,80,94,99,80,50,90],
            &quot;name&quot;: &quot;tom&quot;
        }],
        &quot;categories&quot;: [&quot;first&quot;, &quot;second&quot;, &quot;third&quot;, &quot;forth&quot;, &quot;fifth&quot;, &quot;sixth&quot;, &quot;seventh&quot;]
    };
    var chart = Hxt.spline(&#39;line-chart&#39;, lineData, {
        shared: true
    });
    chart.fn.setTitle({text: &#39;这是我动态设置的标题&#39;});
    //展示动态添加一行数据，和动态删除一行数据的例子
    var num = 1;
    var time = function() {
        var colors = chart.fn.options.colors;
        if(num &lt; 4) {
            setTimeout(function() {
                chart.fn.addSeries({
                    name: &#39;name&#39; + num,
                    data:[num*50, num*50, num*50, num*50, num*50, num*50, num*50],
                    color: colors[num]
                });
                num ++;
                time();
            }, 3000);
        }else {
            setTimeout(function() {
                var series = chart.fn.series;
                series[series.length-1].remove();
                num  = num == 6 ? 1 : num+1;
                time();
            }, 3000);
        }
    };
    time();

    var areaData = {
        &quot;items&quot;: [{
            &quot;data&quot;: [100,105,94,79,80],
            &quot;name&quot;: &quot;tom&quot;
        }, {
            &quot;data&quot;: [65,90,140,100,120],
            &quot;name&quot;: &quot;jane&quot;
        }],
        &quot;timeScope&quot;: {
            &quot;interval&quot;: 86400000,
            &quot;start&quot;: 1463328000000
        }
    };
    var chart1 = Hxt.area(&#39;area-chart&#39;, areaData, {    //曲线图
        Xtype: &#39;datetime&#39;,
        shared: true
    });
    var chart2 = Hxt.column(&#39;column-chart&#39;, areaData, {    //曲线图
        Xtype: &#39;datetime&#39;,
        shared: true
    });

    var pieData = {
        &quot;items&quot;: [{
            &quot;name&quot;: &quot;已开通&quot;,
            &quot;data&quot;: 20
        },{
            &quot;name&quot;: &quot;未开通&quot;,
            &quot;data&quot;: 5
        },{
            &quot;name&quot;: &quot;待定&quot;,
            &quot;data&quot;: 10
        }]
    };
    var chart3 = Hxt.pie(&#39;pie-chart1&#39;, pieData, {
        size: &#39;45%&#39;,
        valueSuffix: &#39;个&#39;,
        showPercentLabels: true
    });
    var chart4 = Hxt.pie(&#39;pie-chart2&#39;, pieData, {    
        startAngle: -90,  //设置角度，达到半圆效果
        endAngle: 90
    });

                                var mixData = {
                                    &quot;items&quot;: [{
                                        &quot;type&quot;: &quot;column&quot;,
                                        &quot;name&quot;: &quot;第一天&quot;,
                                        &quot;data&quot;: [3, 2, 1, 3, 4]
                                    },{
                                        &quot;type&quot;: &quot;column&quot;,
                                        &quot;name&quot;: &quot;第二天&quot;,
                                        &quot;data&quot;: [2, 3, 5, 7, 9]
                                    },{
                                        &quot;type&quot;: &quot;spline&quot;,
                                        &quot;name&quot;: &quot;平均值&quot;,
                                        &quot;data&quot;: [2.5, 2.5, 3, 5, 6.5]
                                    },{
                                        &quot;type&quot;: &quot;pie&quot;,
                                        &quot;name&quot;: &quot;总量&quot;,
                                        &quot;data&quot;: [{
                                            &quot;name&quot;: &quot;第一天&quot;,
                                            &quot;y&quot;: 13
                                        },{
                                            &quot;name&quot;: &quot;第二天&quot;,
                                            &quot;y&quot;: 26
                                        }]
                                    }],
                                    &quot;categories&quot;: [&quot;苹果&quot;, &quot;橘子&quot;, &quot;石榴&quot;, &quot;香蕉&quot;, &quot;草莓&quot;]
                                };
                                var chart5 = Hxt.mix(&#39;mix-chart&#39;, mixData, {
                                    valueSuffix: &#39;斤&#39;,
                                    mixPieCenter: [60, 50],
                                    mixPieSize: &#39;55%&#39;,
                                    shared: true,
                                    chartLabel: {
                                        html: &#39;水果两天的总销量&#39;,
                                        style: {
                                            left: &#39;30px&#39;,
                                            top: &#39;5px&#39;
                                        }
                                    }
                                });
&lt;/script&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;header style=&quot;margin-top:-55px;text-align:center&quot;&gt;&lt;br&gt;    &lt;p style=&quot;font-size: 1.5em;margin-top: 30px;&quot;&gt;&lt;span&gt;highextend图表实例&lt;/span&gt;&lt;a href=&quot;https://github.com/luckykun/highextend&quot; style=&quot;font-size:14px;font-weight:normal;&quot;&gt;view on github&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;/header&gt;

&lt;p&gt;highextend是基于highcharts进一步封装的图表组件，组件暴露一个&lt;code&gt;Hxt&lt;/code&gt;的全局对象，它有以下一些方法来绘制不同类的图形，从此以后，画图只需简简单单的几行配置就ok了！赶紧点进来看看实例吧！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Hxt.line(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//渲染默认折线图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.spline(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//曲线图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.scatter(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//散点图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.bubble(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//bubble图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.column(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//柱状图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.bar(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//bar图，（横向柱状图）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.area(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//区域图（默认为平滑区域图）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.pie(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//圆饼图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.polar(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//雷达图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.pyramid(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//金字塔图&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hxt.mix(elem, data, options);         &lt;span class=&quot;comment&quot;&gt;//混合图&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="demo" scheme="http://yoursite.com/tags/demo/"/>
    
      <category term="highcharts" scheme="http://yoursite.com/tags/highcharts/"/>
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>总结ES6常用的新特性</title>
    <link href="http://yoursite.com/work/2016-05-10/es6-feature.html"/>
    <id>http://yoursite.com/work/2016-05-10/es6-feature.html</id>
    <published>2016-05-10T15:11:23.000Z</published>
    <updated>2016-05-15T07:17:40.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;ES6是即将到来的新版本JavaScript语言的标准，他给我们带来了更”甜”的语法糖（一种语法，使得语言更容易理解和更具有可读性，也让我们编写代码更加简单快捷），如箭头函数（=&amp;gt;）、class等等。用一句话来说就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ES6给我们提供了许多的新语法和代码特性来提高javascript的体验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不过遗憾的是，现在还没有浏览器能够很好的支持es6语法，&lt;a href=&quot;http://kangax.github.io/compat-table/es6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里&lt;/a&gt;查看浏览器支持情况，所以我们在开发中还需要用babel进行转换为CommonJS这种模块化标准的语法。&lt;/p&gt;
&lt;p&gt;因为下面我会讲到一些es6新特性的例子，如果想要运行试试效果的话，可以&lt;a href=&quot;http://google.github.io/traceur-compiler/demo/repl.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里&lt;/a&gt;去测试es6的代码。&lt;/p&gt;
&lt;h1 id=&quot;es6常用特性列举&quot;&gt;&lt;a href=&quot;#es6常用特性列举&quot; class=&quot;headerlink&quot; title=&quot;es6常用特性列举&quot;&gt;&lt;/a&gt;es6常用特性列举&lt;/h1&gt;&lt;p&gt;然后我下面简单的介绍一些很常用的语法特性，如果想完整的了解ES6，我推荐大家&lt;a href=&quot;http://gank.io/post/564151c1f1df1210001c9161&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义函数&quot;&gt;&lt;a href=&quot;#定义函数&quot; class=&quot;headerlink&quot; title=&quot;定义函数&quot;&gt;&lt;/a&gt;定义函数&lt;/h2&gt;&lt;p&gt;我们先来看一个基本的新特性，在javascript中，定义函数需要关键字function，但是在es6中，还有更先进的写法，我们来看：&lt;/p&gt;
&lt;p&gt;es6写法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; human = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    breathe(name) &amp;#123;   &lt;span class=&quot;comment&quot;&gt;//不需要function也能定义breathe函数。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name + &lt;span class=&quot;string&quot;&gt;&#39; is breathing...&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;human.breathe(&lt;span class=&quot;string&quot;&gt;&#39;jarson&#39;&lt;/span&gt;);   &lt;span class=&quot;comment&quot;&gt;//输出 ‘jarson is breathing...’&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转成js代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; human = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    breathe: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name + &lt;span class=&quot;string&quot;&gt;&#39;is breathing...&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;human.breathe(&lt;span class=&quot;string&quot;&gt;&#39;jarson&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很神奇对不对？这样一对比，就可以看出es6的写法让人简单易懂。别着急，下面还有更神奇的。&lt;/p&gt;
&lt;h2 id=&quot;创建类&quot;&gt;&lt;a href=&quot;#创建类&quot; class=&quot;headerlink&quot; title=&quot;创建类&quot;&gt;&lt;/a&gt;创建类&lt;/h2&gt;&lt;p&gt;我们知道，javascript不像java是面向对象编程的语言，而只可以说是基于对象编程的语言。所以在js中，我们通常都是用function和prototype来模拟&lt;code&gt;类&lt;/code&gt;这个概念。&lt;/p&gt;
&lt;p&gt;但是现在有了es6，我们可以像java那样’明目张胆’的创建一个类了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     breathe() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot; is breathing&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; man = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Human(&lt;span class=&quot;string&quot;&gt;&quot;jarson&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;man.breathe();    &lt;span class=&quot;comment&quot;&gt;//jarson is breathing&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码转为js格式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.breathe = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&#39; is breathing&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; man = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Human(&lt;span class=&quot;string&quot;&gt;&#39;jarson&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;man.breathe();    &lt;span class=&quot;comment&quot;&gt;//jarson is breathing&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以我们看到，我们可以像java那样语义化的去创建一个类。另外，js中的继承父类，需要用prototype来实现。那么在es6中，又有什么新的方法来实现类的继承呢？继续看：&lt;/p&gt;
&lt;p&gt;假如我们要创建一个Man类继承上面的Human类，es6代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Man&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name, sex) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sex = sex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      info()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&#39;is &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sex);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xx = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Man(&lt;span class=&quot;string&quot;&gt;&#39;jarson&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;boy&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xx.breathe();   &lt;span class=&quot;comment&quot;&gt;//jarson is breathing&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xx.info();   &lt;span class=&quot;comment&quot;&gt;//arsonis boy&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码很简单，不作赘述，可以使用文章里提到的在线工具去试试效果就能明白了。需要注意的是：&lt;code&gt;super()&lt;/code&gt;是父类的构造函数。&lt;/p&gt;
&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;在ES6标准中，javascript原生支持module了。将不同功能的代码分别写在不同文件中，各模块只需&lt;code&gt;导出(export)&lt;/code&gt;公共接口部分，然后在需要使用的地方通过模块的&lt;code&gt;导入(import)&lt;/code&gt;就可以了。下面继续看例子：&lt;/p&gt;
&lt;h3 id=&quot;内联导出&quot;&gt;&lt;a href=&quot;#内联导出&quot; class=&quot;headerlink&quot; title=&quot;内联导出&quot;&gt;&lt;/a&gt;内联导出&lt;/h3&gt;&lt;p&gt;ES6模块里的对象可在创建它们的声明中直接导出，一个模块中可无数次使用export。&lt;/p&gt;
&lt;p&gt;先看模块文件&lt;code&gt;app.js&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    breathe() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot; is breathing&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;i am runing&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;i am eating&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例子中的模块导出了两个对象：Human类和run函数， eat函数没有导出，则仍为此模块私有，不能被其他文件使用。&lt;/p&gt;
&lt;h3 id=&quot;导出一组对象&quot;&gt;&lt;a href=&quot;#导出一组对象&quot; class=&quot;headerlink&quot; title=&quot;导出一组对象&quot;&gt;&lt;/a&gt;导出一组对象&lt;/h3&gt;&lt;p&gt;另外，其实如果需要导出的对象很多的时候，我们可以在最后统一导出一组对象。&lt;/p&gt;
&lt;p&gt;更改&lt;code&gt;app.js&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    breathe() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot; is breathing&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;i am runing&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;i am eating&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &amp;#123;Human, run&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的写法功能和上面一样，而且也很明显，在最后可以清晰的看到导出了哪些对象。&lt;/p&gt;
&lt;h3 id=&quot;Default导出&quot;&gt;&lt;a href=&quot;#Default导出&quot; class=&quot;headerlink&quot; title=&quot;Default导出&quot;&gt;&lt;/a&gt;Default导出&lt;/h3&gt;&lt;p&gt;导出时使用关键字default，可将对象标注为default对象导出。default关键字在每一个模块中只能使用一次。它既可以用于内联导出，也可以用于一组对象导出声明中。&lt;/p&gt;
&lt;p&gt;查看导出default对象的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...   &lt;span class=&quot;comment&quot;&gt;//创建类、函数等等&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;  &lt;span class=&quot;comment&quot;&gt;//把Human类和run函数标注为default对象导出。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Human,  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    run  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;无对象导入&quot;&gt;&lt;a href=&quot;#无对象导入&quot; class=&quot;headerlink&quot; title=&quot;无对象导入&quot;&gt;&lt;/a&gt;无对象导入&lt;/h3&gt;&lt;p&gt;如果模块包含一些逻辑要执行，且不会导出任何对象，此类对象也可以被导入到另一模块中，导入之后只执行逻辑。如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./module1.js&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;导入默认对象&quot;&gt;&lt;a href=&quot;#导入默认对象&quot; class=&quot;headerlink&quot; title=&quot;导入默认对象&quot;&gt;&lt;/a&gt;导入默认对象&lt;/h3&gt;&lt;p&gt;使用Default导出方式导出对象，该对象在import声明中将直接被分配给某个引用，如下例中的”app”。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; app &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./module1.js&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面例子中，默认&lt;code&gt;./module1.js&lt;/code&gt;文件只导出了一个对象；若导出了一组对象，则应该在导入声明中一一列出这些对象，如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;Human, run&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;let与const&quot;&gt;&lt;a href=&quot;#let与const&quot; class=&quot;headerlink&quot; title=&quot;let与const&quot;&gt;&lt;/a&gt;let与const&lt;/h2&gt;&lt;p&gt;在我看来，在es6新特性中，在定义变量的时候统统使用&lt;code&gt;let&lt;/code&gt;来代替&lt;code&gt;var&lt;/code&gt;就好了，&lt;code&gt;const&lt;/code&gt;则很直观，用来定义常量，即无法被更改值的变量。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);  &lt;span class=&quot;comment&quot;&gt;//输出: 0,1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;箭头函数&quot;&gt;&lt;a href=&quot;#箭头函数&quot; class=&quot;headerlink&quot; title=&quot;箭头函数&quot;&gt;&lt;/a&gt;箭头函数&lt;/h2&gt;&lt;p&gt;ES6中新增的箭头操作符&lt;code&gt;=&amp;gt;&lt;/code&gt;简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值，这样的写法可以为我们减少大量的代码，看下面的实例：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;arr.forEach((item, i) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(item, i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; newArr = arr.filter((item) =&amp;gt; (item&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newArr); &lt;span class=&quot;comment&quot;&gt;//[6, 8, 9];&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的&lt;code&gt;(item, i)&lt;/code&gt;就是参数，后面的&lt;code&gt;console.log(item, i)&lt;/code&gt;就是回到函数要执行的操作逻辑。&lt;/p&gt;
&lt;p&gt;上面代码转为js格式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;arr.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item, i&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(item, i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newArr = arr.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (item &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newArr);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;字符串模版&quot;&gt;&lt;a href=&quot;#字符串模版&quot; class=&quot;headerlink&quot; title=&quot;字符串模版&quot;&gt;&lt;/a&gt;字符串模版&lt;/h2&gt;&lt;p&gt;ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。看一下实例就会明白了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//产生一个随机数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; num = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//将这个数字输出到console&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`your num is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;num&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解构&quot;&gt;&lt;a href=&quot;#解构&quot; class=&quot;headerlink&quot; title=&quot;解构&quot;&gt;&lt;/a&gt;解构&lt;/h2&gt;&lt;p&gt;若一个函数要返回多个值，常规的做法是返回一个对象，将每个值做为这个对象的属性返回。在ES6中，利用解构这一特性，可以直接返回一个数组，然后数组中的值会自动被解析到对应接收该值的变量中。我们来看例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getVal&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [x,y] = getVal(); &lt;span class=&quot;comment&quot;&gt;//函数返回值的解构&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;x:&#39;&lt;/span&gt;+x+&lt;span class=&quot;string&quot;&gt;&#39;, y:&#39;&lt;/span&gt;+y);   &lt;span class=&quot;comment&quot;&gt;//输出：x:1, y:2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;默认参数&quot;&gt;&lt;a href=&quot;#默认参数&quot; class=&quot;headerlink&quot; title=&quot;默认参数&quot;&gt;&lt;/a&gt;默认参数&lt;/h2&gt;&lt;p&gt;现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name=name||&lt;span class=&quot;string&quot;&gt;&#39;tom&#39;&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;//传统的指定默认参数的方式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt;+name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//运用ES6的默认参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name=&#39;tom&#39;&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;//如果没有传这个参数，才会有默认值，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sayHello();&lt;span class=&quot;comment&quot;&gt;//输出：Hello tom&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sayHello(&lt;span class=&quot;string&quot;&gt;&#39;jarson&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//输出：Hello jarson&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sayHello2();&lt;span class=&quot;comment&quot;&gt;//输出：Hello tom&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sayHello2(&lt;span class=&quot;string&quot;&gt;&#39;jarson&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//输出：Hello jarson&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意： &lt;code&gt;sayHello2(name=&amp;#39;tom&amp;#39;)&lt;/code&gt;这里的等号，意思是没有传这个参数，则设置默认值，而不是给参数赋值的意思。&lt;/p&gt;
&lt;h2 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h2&gt;&lt;p&gt;Proxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义被监听的目标对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; engineer = &amp;#123; name: &lt;span class=&quot;string&quot;&gt;&#39;Joe Sixpack&#39;&lt;/span&gt;, salary: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义处理程序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; interceptor = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      set(receiver, property, value) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(property, &lt;span class=&quot;string&quot;&gt;&#39;is changed to&#39;&lt;/span&gt;, value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        receiver[property] = value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建代理以进行侦听&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;engineer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;(engineer, interceptor);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//做一些改动来触发代理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;engineer.salary = &lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//控制台输出：salary is changed to 70&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于处理程序，是在被监听的对象身上发生了相应事件之后，处理程序里面的方法就会被调用。&lt;/p&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;总的来说，虽然支持es6的情况到目前还不是很乐观，但es6的新语法特性让前端和后端的差异越来越小了，这是一个新时代的开始，我们必须要了解这些新的前沿知识，才能跟上时代的步伐。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;ES6是即将到来的新版本JavaScript语言的标准，他给我们带来了更”甜”的语法糖（一种语法，使得语言更容易理解和更具有可读性，也让我们编写代码更加简单快捷），如箭头函数（=&amp;gt;）、class等等。用一句话来说就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ES6给我们提供了许多的新语法和代码特性来提高javascript的体验&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>实例demo之React-Todos</title>
    <link href="http://yoursite.com/work/2016-05-08/react-todo.html"/>
    <id>http://yoursite.com/work/2016-05-08/react-todo.html</id>
    <published>2016-05-08T14:11:51.000Z</published>
    <updated>2016-05-21T14:45:18.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;header style=&quot;margin-top:-55px;&quot;&gt;&lt;br&gt;    &lt;h1 class=&quot;todo-title&quot;&gt;&lt;span&gt;React-Todos&lt;/span&gt;&lt;a href=&quot;https://github.com/luckykun/react-demo&quot; style=&quot;font-size:14px;font-weight:normal;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view on github&lt;/a&gt;&lt;/h1&gt;&lt;br&gt;&lt;/header&gt;

&lt;div class=&quot;container&quot; style=&quot;margin-top:-30px;&quot;&gt;&lt;br&gt;    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;script src=&quot;https://rawgit.com/luckykun/react-demo/master/src/vendor/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://rawgit.com/luckykun/react-demo/master/out/bundle.js&quot;&gt;&lt;/script&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;code&gt;React-Todos&lt;/code&gt;是一个管理任务清单的例子，数据使用localstorage存储在浏览器中，有以下几点功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在输入框输入任务名称，回车键显示。&lt;/li&gt;
&lt;li&gt;勾选其中一条任务列表，表示已完成。&lt;/li&gt;
&lt;li&gt;鼠标移入其中一个list，可以删除。&lt;/li&gt;
&lt;li&gt;底部有全选和删除已完成任务列表的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;header style=&quot;margin-top:-55px;&quot;&gt;&lt;br&gt;    &lt;h1 class=&quot;todo-title&quot;&gt;&lt;span&gt;React-Todos&lt;/span&gt;&lt;a href=&quot;https://github.com/luckykun/react-demo&quot; style=&quot;font-size:14px;font-weight:normal;&quot;&gt;view on github&lt;/a&gt;&lt;/h1&gt;&lt;br&gt;&lt;/header&gt;

&lt;div class=&quot;container&quot; style=&quot;margin-top:-30px;&quot;&gt;&lt;br&gt;    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;script src=&quot;https://rawgit.com/luckykun/react-demo/master/src/vendor/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://rawgit.com/luckykun/react-demo/master/out/bundle.js&quot;&gt;&lt;/script&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="demo" scheme="http://yoursite.com/tags/demo/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离之前端项目构建（grunt+require+angular）</title>
    <link href="http://yoursite.com/work/2016-05-02/grunt-angular.html"/>
    <id>http://yoursite.com/work/2016-05-02/grunt-angular.html</id>
    <published>2016-05-02T14:33:32.000Z</published>
    <updated>2016-05-15T07:15:26.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好==，那我们到底该怎么办呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;可能有人会说了，使用svn或者git这种版本控制工具呀，大家down一套代码，在一起开发不就好了。我想说的是，代码虽然有了，但是对于服务端同学的那一套复杂的环境，有兴趣或者涉猎还好，如果没有，自己去启个java环境估计都得花上半天时间吧。&lt;/p&gt;
&lt;p&gt;此时你会深深的感受到了那句名言的魅力，&lt;code&gt;时间就是金钱！&lt;/code&gt;后来我发现，现在的web开发，谁还用这种低级的方法，大家都已经开始搞&lt;code&gt;前后端分离了&lt;/code&gt;！&lt;/p&gt;
&lt;h1 id=&quot;前后端分离的目的和作用&quot;&gt;&lt;a href=&quot;#前后端分离的目的和作用&quot; class=&quot;headerlink&quot; title=&quot;前后端分离的目的和作用&quot;&gt;&lt;/a&gt;前后端分离的目的和作用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;要弄清前后端分离的目的和作用，首先要知道什么是前后端分离。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在的web前端越来越偏向于独立的技术种类，在不久的将来，服务端的活都会被我们给承包了。我曾经在某个网站读到这样一句话，假如有一个大型网站，例如淘宝网，它肯定不止是一个web项目，而是多个web项目的集合，那么如果前端不作整合、封装，那么不同的项目开发必然会有大量的重复劳动。从这句话和我在前言中举的例子中可以看出，前端开发单独封装组件，单独开发项目，单独维护，前端代码不和服务端逻辑揉在一起，这就是我理解的前后端分离。唯一需要和服务端交互的，就是通过ajax去请求他们提供的接口。&lt;/p&gt;
&lt;p&gt;所以，从另一个角度看，我们在开发的时候，只要和服务端约定好接口格式，从项目开工到结束，我们都不需要和服务端开发打交道，这无疑提高了项目质量和开发效率。前后端分离的终极目标应该是前端和服务端是完全独立的项目，一个项目开始之后，前端开发前端的，服务端开发服务端的，并且最后还需要独立部署，这样才真正实现了前后端解耦分离，前后端的沟通主要集中在数据接口的格式上。&lt;/p&gt;
&lt;h1 id=&quot;前端项目构建&quot;&gt;&lt;a href=&quot;#前端项目构建&quot; class=&quot;headerlink&quot; title=&quot;前端项目构建&quot;&gt;&lt;/a&gt;前端项目构建&lt;/h1&gt;&lt;p&gt;现在要做到前端项目独立，这时候为了项目便于管理维护，我们就需要项目化，工程化，开发规范，自动化压缩混淆，自动化发布，前端优化等等。&lt;/p&gt;
&lt;p&gt;现在前端框架这么丰富，一个项目要引入哪些框架，就因人而异了，工作以来一直在学习angular，所以最近自己尝试着搭了一套基于grunt+requireJs+angularJs的应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grunt: 操作项目文件：比如文件转换、压缩、打包部署等等。&lt;/li&gt;
&lt;li&gt;requireJs: js库加载管理，支持按需加载，模块化引入。&lt;/li&gt;
&lt;li&gt;angularJs: js前端MVC框架，支持依赖注入、双向绑定等主要特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个库是现在中大型前端项目比较适合的搭配，很有必要去学习并掌握他们。&lt;/p&gt;
&lt;h2 id=&quot;创建项目目录&quot;&gt;&lt;a href=&quot;#创建项目目录&quot; class=&quot;headerlink&quot; title=&quot;创建项目目录&quot;&gt;&lt;/a&gt;创建项目目录&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir myProject&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd myProject&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建项目文件夹，然后进入文件夹，一下操作均在此文件夹下执行。&lt;/p&gt;
&lt;h2 id=&quot;创建package-json&quot;&gt;&lt;a href=&quot;#创建package-json&quot; class=&quot;headerlink&quot; title=&quot;创建package.json&quot;&gt;&lt;/a&gt;创建package.json&lt;/h2&gt;&lt;p&gt;&lt;code&gt;首先我们需要为npm提供一个package.json，告诉它我们的项目信息，特别是项目中将会使用的插件。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以用命令生成，后续也能够手动修改。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;他会问我们一些问题，一路使用默认值，创建完毕。&lt;/p&gt;
&lt;h2 id=&quot;安装grunt&quot;&gt;&lt;a href=&quot;#安装grunt&quot; class=&quot;headerlink&quot; title=&quot;安装grunt&quot;&gt;&lt;/a&gt;安装grunt&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install grunt --save-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用npm安装grunt插件，它将被安装到根目录的&lt;code&gt;node_modules&lt;/code&gt;文件夹下，所有npm插件都会放到这里。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--save-dev&lt;/code&gt;： 意思是安装插件的同时，也把它添加到项目信息文件&lt;code&gt;package.json&lt;/code&gt;中的&lt;code&gt;devDependencies&lt;/code&gt;字段里，意思是这个项目依赖于这些插件。下次使用&lt;code&gt;npm install&lt;/code&gt;的时候就会自动安装这些插件。&lt;/p&gt;
&lt;h2 id=&quot;为grunt创建配置文件Gruntfile-js&quot;&gt;&lt;a href=&quot;#为grunt创建配置文件Gruntfile-js&quot; class=&quot;headerlink&quot; title=&quot;为grunt创建配置文件Gruntfile.js&quot;&gt;&lt;/a&gt;为grunt创建配置文件Gruntfile.js&lt;/h2&gt;&lt;p&gt;Gruntfile.js文件用于定义任务、任务组。它可以用来执行文件的类型转换、压缩、合并等等操作，为开发大大提高了效率。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装grunt-init&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install grunt-init -g      &lt;span class=&quot;comment&quot;&gt;//全局安装grunt-init&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载grunt模板&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git clone https:&lt;span class=&quot;comment&quot;&gt;//github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成Gruntfile&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;grunt-init gruntfile&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  在项目根目录下生成Gruntfile.js文件，跟package.json文件一下，按需回答一些文件，就创建好了，后续能手动修改（其实大部分都是自己手写的）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装bower&quot;&gt;&lt;a href=&quot;#安装bower&quot; class=&quot;headerlink&quot; title=&quot;安装bower&quot;&gt;&lt;/a&gt;安装bower&lt;/h2&gt;&lt;p&gt;bower是用来管理js库的一个工具，比如下载jquery、angularjs等库。并且下载的时候还能指定库的版本。&lt;/p&gt;
&lt;p&gt;同样适用npm进行安装。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install bower -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;为bower生成配置文件bower-json&quot;&gt;&lt;a href=&quot;#为bower生成配置文件bower-json&quot; class=&quot;headerlink&quot; title=&quot;为bower生成配置文件bower.json&quot;&gt;&lt;/a&gt;为bower生成配置文件bower.json&lt;/h2&gt;&lt;p&gt;整个项目的信息文件是&lt;code&gt;package.json&lt;/code&gt;，执行任务插件grunt的信息文件是&lt;code&gt;Gruntfile.js&lt;/code&gt;，那么bower当然也有自己的信息文件了，那就是&lt;code&gt;bower.json&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bower init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过我觉得bower.json基本没有什么作用，它最大的作用就是用来下载我们需要的各种技术库。&lt;/p&gt;
&lt;p&gt;比如使用bower下载angularjs：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bower install angularjs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这行命令将会把angular下载下来，放在根目录下的&lt;code&gt;bower_components&lt;/code&gt;文件夹下，不过它默认下载的是angular的最新版，有时候，我们可能不需要最新版。假如，我想下载angularjs 1.2.2版本该怎么办呢？&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bower install angularjs#1.2.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，bower只负责下载文件到&lt;code&gt;bower_components&lt;/code&gt;目录下，但是我们项目中可能并不想把库放在这里，所以我们可以选择使用grunt的插件&lt;code&gt;grunt-bower-task&lt;/code&gt;，在Gruntfile.js中定义一个任务来移动文件到想要的目录下。&lt;/p&gt;
&lt;h2 id=&quot;关于Requirejs&quot;&gt;&lt;a href=&quot;#关于Requirejs&quot; class=&quot;headerlink&quot; title=&quot;关于Requirejs&quot;&gt;&lt;/a&gt;关于Requirejs&lt;/h2&gt;&lt;p&gt;官网上是这样说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RequireJS的目标是鼓励代码的模块化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它使用了不同于传统的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化，按需加载。&lt;/p&gt;
&lt;h2 id=&quot;使用Requirejs&quot;&gt;&lt;a href=&quot;#使用Requirejs&quot; class=&quot;headerlink&quot; title=&quot;使用Requirejs&quot;&gt;&lt;/a&gt;使用Requirejs&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script data-main=&amp;quot;scripts/main&amp;quot; src=&amp;quot;scripts/require.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一般在首页加载requiejs文件，然后属性&lt;code&gt;data-main&lt;/code&gt;指定的文件就是接下来要加载的文件，然后我们再看&lt;code&gt;main.js&lt;/code&gt;文件:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.config(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    baseUrl: &lt;span class=&quot;string&quot;&gt;&#39;script/lib&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    paths: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        app: &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        jquery: &lt;span class=&quot;string&quot;&gt;&#39;/jquery/jquery-min&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        angular: &lt;span class=&quot;string&quot;&gt;&#39;/angularjs/angular-min&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    shim: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            exports: &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;app&lt;/span&gt;) (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    app.hello();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;我们在&lt;code&gt;paths&lt;/code&gt;中声明了3个模块，app、jquery和angular，后面的路径是模块对应的文件路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shim&lt;/code&gt;中用来处理一些没有遵守requirejs规范的js库，比如angularjs库，所以要手动配置一个叫&lt;code&gt;angular&lt;/code&gt;的模块。&lt;/li&gt;
&lt;li&gt;最后用require来导入我们自己的模块，可在后面的callback中拿到对应模块的实例，并对它进行一些操作，比如我们调用了&lt;code&gt;app.hello()&lt;/code&gt;方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;AngularJs实例&quot;&gt;&lt;a href=&quot;#AngularJs实例&quot; class=&quot;headerlink&quot; title=&quot;AngularJs实例&quot;&gt;&lt;/a&gt;AngularJs实例&lt;/h1&gt;&lt;p&gt;上面的步骤只是简单说了下大体步骤，纸上谈兵之后，就可以开始实际操作了。&lt;/p&gt;
&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;p&gt;项目文件夹结构如下图（当然目录结构因人而异）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tps/TB1bzUGJXXXXXcOXpXXXXXXXXXX-251-584.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;: 用来存放项目依赖的grunt插件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower_components&lt;/code&gt;: 用来存放bower下载的库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;: 用来存放经过build处理之后的js文件。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;app&lt;/code&gt;: 是真正的开发需要的文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: 用来存放mock数据用的json文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt;: 用来存放静态图片。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scripts&lt;/code&gt;: 用来存放所有js文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;controller&lt;/code&gt;: 用来存放控制器文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directive&lt;/code&gt;: 定义的指令文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: 定义的过滤器文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;: 路由文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt;: 服务文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vendor&lt;/code&gt;: 公共库文件，比如angular,jquery,bootstrap等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;styles&lt;/code&gt;目录用来存放样式文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt;目录用来存放&lt;code&gt;页面&lt;/code&gt;html文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partials&lt;/code&gt;目录用来存放&lt;code&gt;页面片段&lt;/code&gt;的html文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录创建好了，现在来写一些代码，让项目能够运行起来。&lt;/p&gt;
&lt;h2 id=&quot;views-index-html&quot;&gt;&lt;a href=&quot;#views-index-html&quot; class=&quot;headerlink&quot; title=&quot;views/index.html&quot;&gt;&lt;/a&gt;views/index.html&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;grunt+requirejs+angular项目构建&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../scripts/vendor/requirejs/require.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-main&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../scripts/config&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 先引入requirejs, 然后引入config.js --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-controller&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;testController&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&amp;#123;app&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述index中，先引入了require.js，然后加载data-main对应的config.js文件。&lt;/p&gt;
&lt;h2 id=&quot;scripts-config-js&quot;&gt;&lt;a href=&quot;#scripts-config-js&quot; class=&quot;headerlink&quot; title=&quot;scripts/config.js&quot;&gt;&lt;/a&gt;scripts/config.js&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vendorPath = &lt;span class=&quot;string&quot;&gt;&#39;vendor/&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.config(&amp;#123;    &lt;span class=&quot;comment&quot;&gt;//配置模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    baseUrl: &lt;span class=&quot;string&quot;&gt;&#39;../scripts/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    paths: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;: vendorPath + &lt;span class=&quot;string&quot;&gt;&#39;angular/angular&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;: vendorPath + &lt;span class=&quot;string&quot;&gt;&#39;jquery/jquery&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    shim: &amp;#123;   &lt;span class=&quot;comment&quot;&gt;//处理没有遵守requirejs规范的js库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            exports: &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&#39;./bootstrap&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;bootstrap&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过require引入了bootstrap.js文件。&lt;/p&gt;
&lt;h2 id=&quot;scripts-bootstrap-js&quot;&gt;&lt;a href=&quot;#scripts-bootstrap-js&quot; class=&quot;headerlink&quot; title=&quot;scripts/bootstrap.js&quot;&gt;&lt;/a&gt;scripts/bootstrap.js&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;define([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./controller/_base&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;angular&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 手动将angular模块绑定到document对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    angular.element(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        angular.bootstrap(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;myProject&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;注意：function的内容是requirejs引入所有文件之后的回调函数。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;bootstrap是angular对象的一个方法，用于手动启动。上述代码除了引入了angular等js库外，还引入了app.js文件。&lt;/p&gt;
&lt;h2 id=&quot;scripts-app-js&quot;&gt;&lt;a href=&quot;#scripts-app-js&quot; class=&quot;headerlink&quot; title=&quot;scripts/app.js&quot;&gt;&lt;/a&gt;scripts/app.js&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;define([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./controller/controllers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;angular&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//定义将要绑定到document上的模块名称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angular.module(&lt;span class=&quot;string&quot;&gt;&#39;myProject&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;projectController&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义模块名&lt;code&gt;myProject&lt;/code&gt;的时候，同时指定它依赖于另一个模块&lt;code&gt;projectController&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同时在&lt;code&gt;./controller/controllers.js&lt;/code&gt;中定义这个模块：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;define([&lt;span class=&quot;string&quot;&gt;&#39;angular&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;angular&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angular.module(&lt;span class=&quot;string&quot;&gt;&#39;projectController&#39;&lt;/span&gt;, []);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里是给所有的控制器定义了一个单独的模块，然后让主要模块依赖于这个模块，这样做的目的是方便管理维护，我们还可以给所有的服务、路由、过滤器都添加一个单独的模块，然后在app.js中添加注入即可。&lt;/p&gt;
&lt;h2 id=&quot;controller-testController-js&quot;&gt;&lt;a href=&quot;#controller-testController-js&quot; class=&quot;headerlink&quot; title=&quot;controller/testController.js&quot;&gt;&lt;/a&gt;controller/testController.js&lt;/h2&gt;&lt;p&gt;如果想要让视图文件&lt;code&gt;views/index.html&lt;/code&gt;能够看到效果，我们就要开始编写控制器文件了，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;define([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./controllers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mod&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; controllerFn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$scope, $location&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $scope.app = &lt;span class=&quot;string&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    controllerFn.$inject = [&lt;span class=&quot;string&quot;&gt;&#39;$scope&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;$location&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mod.controller(&lt;span class=&quot;string&quot;&gt;&#39;testController&#39;&lt;/span&gt;, controllerFn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引入控制器的单独模块文件’./controllers’,然后在模块上新建一个名为&lt;code&gt;testController&lt;/code&gt;的控制器，并在$scope上绑定了一个值为’hello, world’的变量&lt;code&gt;app&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;查看效果&quot;&gt;&lt;a href=&quot;#查看效果&quot; class=&quot;headerlink&quot; title=&quot;查看效果&quot;&gt;&lt;/a&gt;查看效果&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;启动一个简单的web服务器，默认监听8000端口。在浏览器输入正确地址就能看到效果了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hello, world&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;现在，我们需要做的就是，和服务端约定好接口格式，自己根据格式mock需要的数据，然后，我们可以随心所欲的开发我们的项目了，不用再和人打交道了。开发完毕之后，再通过grunt压缩、合并、打包文件等操作，暴露给外部的只需一个js文件，另外还可以通过git等版本管理工具来迭代项目。有了这种开发方式，你再也不用担心服务端开发随时来烦你，自己也有更多时间来钻研前端本身的技术了，哈哈。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;前段时间在公司做了一个项目，前后端的合作方式是这样的：前端开发页面，然后把代码给到后端同学，后端同学通过java的vm模板来渲染页面。慢慢的我发现，这种方式简直是太low了，因为所有的前端代码都揉在服务端同学那里，而每次项目需要更新，甚至只是页面微调，只要服务端同学说他不懂，或者是没有时间，我们前端同学就要屁颠屁颠的跑去他那里配合他修改代码，维护成本高，卖力不讨好==，那我们到底该怎么办呢？&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="grunt" scheme="http://yoursite.com/tags/grunt/"/>
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
      <category term="构建" scheme="http://yoursite.com/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一个有故事的人</title>
    <link href="http://yoursite.com/simomo/2016-04-23/simomo01.html"/>
    <id>http://yoursite.com/simomo/2016-04-23/simomo01.html</id>
    <published>2016-04-23T14:54:48.000Z</published>
    <updated>2016-05-15T09:00:10.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/111.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;村里住着一户姓张的人家。他家原来是在屯子的东头居住，后来买了我家前院的房子就搬过来居住，这样我们两家就成了邻居。原来并不曾注意的人家，因为成了邻居，接触多了，也就多了一分关注和熟悉。&lt;/p&gt;
&lt;p&gt;他家有一个老太太，我认识她以来，她就和儿子一家人在一起生活，我从未见过她的老伴。但这并未引起我的好奇，别的人家老人没有老伴的也有。&lt;/p&gt;
&lt;p&gt;但因为是邻居了，对她和她家的事了解也就多了。一次我听屯邻给我讲了她和她老伴的事，我才知道原本一个平常无奇的老太太却是一个有故事的人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/222.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（老奶奶内心独白：擦，无辜躺枪……orz）&lt;/p&gt;
&lt;p&gt;原来，老太太虽然其貌不扬，年轻时却嫁给了当地一位美男子，男方形象好，没的说。而老太太呢，因为小时得过天花，病好后，落下一张麻脸。等到了姑娘出嫁的年龄，却难了。&lt;/p&gt;
&lt;p&gt;那个时代，虽然还没有多少自由恋爱，但青年男女结婚前总要见上一面，算是相看，相中的就定下来。而一个年轻姑娘有张麻脸，男方一般是不会相中的。正好这时有人给她家姊妹做媒，于是女方家就想了一个调包之计，让麻脸姑娘的妹妹去相亲。&lt;/p&gt;
&lt;p&gt;到了结婚那天，把麻脸姑娘送到了男方家去成亲。一直到了结婚那天，男方才知道与他结婚的是有着麻脸的这位姑娘，然而却是生米做成了熟饭，男方也就无可奈何了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/333.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;（原谅我找了这么一张唯美又符合情境的图…）&lt;/p&gt;
&lt;p&gt;屯邻没告诉我当时男方是否反抗过，或许他也不知道。但按情理说，自己结婚的与相亲的不是一个人，男方肯定是不情愿的。伊人不见，嫫母当面，美好的想象变成了无奈的现实，放在谁身上都将是苦涩的。&lt;/p&gt;
&lt;p&gt;二人结婚后，生了一个儿子，就是老太太一直与之在一起生活的这位。再后来，听说男方有一次出去干活，受了凉，回家后肚子痛，大概是肠绞痛之类，却因此就死去了。此后就剩下老太太一个人与儿子一起生活。从年龄算来，老太太守寡时还很年轻，到现在也很多年了，不知道这算幸还是不幸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/4444.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(这悲伤的表情……)&lt;/p&gt;
&lt;p&gt;最开始听到这个事，我很惊讶，甚至都有些怀疑。老太太是五六十年代过来的人，那个时代，正是中国人”大干革命”的年代。我一直认为那个时代的人都是一门心思、思想上纯而又纯。这个发生在老百姓中的真实的事让我知道，世事远没有我想的那么简单。老百姓也是有花花肠子弯弯道道的。不过因为这事发生在民间，觉得还是朴素的。&lt;/p&gt;
&lt;p&gt;老太太是很普通的一个农村老太太，性格平和，见我总是微笑说话。本来平平常常的一个人，自打听说这个事情，我后来再见到老太太，总觉得有点异样，好像一个人有了故事，就会让人觉得有些不平常了。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;圣经里说，日光之下，并无新事。意思是说许多现在发生的事，其实早已经发生过了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="丝茉茉" scheme="http://yoursite.com/categories/simomo/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建属于自己的博客</title>
    <link href="http://yoursite.com/work/2016-04-23/heoll-hexo.html"/>
    <id>http://yoursite.com/work/2016-04-23/heoll-hexo.html</id>
    <published>2016-04-23T14:11:51.000Z</published>
    <updated>2016-05-21T15:54:34.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;一直都在博客园写博客，不过最近在逛园子的时候不小心看到了&lt;code&gt;hexo&lt;/code&gt;,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^&lt;/p&gt;
&lt;p&gt;为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;(n)    &lt;span class=&quot;comment&quot;&gt;//写文章&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate(g)    &lt;span class=&quot;comment&quot;&gt;//把文章生成页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server(s)    &lt;span class=&quot;comment&quot;&gt;//启动本地服务调试&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy(d)    &lt;span class=&quot;comment&quot;&gt;//部署到github 可与hexo g合并为 hexo d -g&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;折腾了大半天，终于搭建好了自己的博客。不过在这中途，也是历经了九九八十一难呀，所以，我怀着激动心情，把我在这个过程中遇到的坑作为第一篇博客一一记录下来，希望能帮到后面的学者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;备注1：如果喜欢以官方教程为主的，点这里&lt;/code&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo官方文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;备注2：网上大多教程是都是hexo2.x版本的，所以有很多坑。因此以下教程是针对hexo的版本为3.x以上的，大家放心使用。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装node&lt;/li&gt;
&lt;li&gt;到&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;官网下载相应平台的最新版本，一路安装即可。&lt;/li&gt;
&lt;li&gt;安装git&lt;/li&gt;
&lt;li&gt;根据系统不同安装相应的git环境。mac系统不多说，windows一般安装msysgit。下面是我本地msysgit的截图，也还是挺好用的:&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://7xtawy.com2.z0.glb.clouddn.com/msysgit.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装hexo&lt;/p&gt;
&lt;p&gt;  使用以下命令安装hexo到全局&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  然后输入命令&lt;code&gt;hexo -v&lt;/code&gt;输入hexo的版本号即为安装成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;github准备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博客是在&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上托管维护的，所以当然需要一个github的账号了。然后创建一个名为&lt;code&gt;luckykun.github.io&lt;/code&gt;的仓库。&lt;/li&gt;
&lt;li&gt;其中’luckykun’是我的账户名，下文同理。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除此之外，相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.email xxx@&lt;span class=&quot;number&quot;&gt;163.&lt;/span&gt;com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name xxx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -t rsa -C xxx@&lt;span class=&quot;number&quot;&gt;163.&lt;/span&gt;com(邮箱地址)      &lt;span class=&quot;comment&quot;&gt;// 生成ssh&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;找到.ssh文件夹打开，使用cat id_rsa.pub    &lt;span class=&quot;comment&quot;&gt;//打开公钥ssh串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;登陆github，settings － SSH keys  － add ssh keys（把上面的内容全部添加进去即可）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h1&gt;&lt;p&gt;ok，环境都准备好了，开始激动人心的步骤了，搭建博客。&lt;/p&gt;
&lt;p&gt;在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，以下所有的命令行操作都是在这个文件夹下进行的。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;生成静态页面&quot;&gt;&lt;a href=&quot;#生成静态页面&quot; class=&quot;headerlink&quot; title=&quot;生成静态页面&quot;&gt;&lt;/a&gt;生成静态页面&lt;/h1&gt;&lt;p&gt;初始化完成之后，就已经生成一篇”hello word”的文章了，现在执行以下命令把文章编译为静态页面：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;本地启动&quot;&gt;&lt;a href=&quot;#本地启动&quot; class=&quot;headerlink&quot; title=&quot;本地启动&quot;&gt;&lt;/a&gt;本地启动&lt;/h1&gt;&lt;p&gt;把文章变为页面之后，可以执行以下命令，本地启动服务，在浏览器中输入&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt;查看生成的页面效果。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你看到了下面这个画面，恭喜你，你成功了！ &lt;img src=&quot;https://img.alicdn.com/tps/TB1.knpHVXXXXcmaXXXXXXXXXXX-1003-456.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;更换主题&quot;&gt;&lt;a href=&quot;#更换主题&quot; class=&quot;headerlink&quot; title=&quot;更换主题&quot;&gt;&lt;/a&gt;更换主题&lt;/h1&gt;&lt;p&gt;上面的博客效果是hexo自己默认的主题&lt;code&gt;landscape&lt;/code&gt;，如果你满足与它，可以跳过这个步骤，直接进行下一步。但是我却还不够满足，因为我发现了一个页面交互人性化，并且完美兼容不同终端显示的主题&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yilia&lt;/a&gt;，貌似这个主题受欢迎程度很高呀，说明我的审美还是不错啊，哈哈~~&lt;/p&gt;
&lt;p&gt;下面贴出github上star数量最多的前10个主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iissnan/hexo-theme-next&lt;/a&gt;， 3510个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;litten/hexo-theme-yilia&lt;/a&gt;， 1703个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TryGhost/Casper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TryGhost/Casper&lt;/a&gt;， 679个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wuchong/jacman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wuchong/jacman&lt;/a&gt;， 503个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/A-limon/pacman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A-limon/pacman&lt;/a&gt;， 431个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daleanthony/uno&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;daleanthony/uno&lt;/a&gt;， 416个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orderedlist/modernist&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;orderedlist/modernist&lt;/a&gt;， 367个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/presscustomizr/hueman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AlxMedia/hueman&lt;/a&gt;， 336个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kathyqian/crisp-ghost-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kathyqian/crisp-ghost-theme&lt;/a&gt;， 303个star。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xiangming/landscape-plus&lt;/a&gt;， 287个star。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;clone主题代码&lt;/p&gt;
&lt;p&gt;在目录下执行下面的命令clone主题代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git clone https:&lt;span class=&quot;comment&quot;&gt;//github.com/litten/hexo-theme-yilia.git themes/yilia&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;温馨提示：修改的时候，每个冒号后面都需要留一个英文空格，不然会出现很蛋疼的报错！&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改&lt;code&gt;Blog/_config.yml&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;theme: yilia    &lt;span class=&quot;comment&quot;&gt;//默认为landscape&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改&lt;code&gt;themes/yilia/_config.yml&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Header&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;menu:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    主页: /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    所有文章: /archives&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    丝茉茉: /categories/simomo/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    相册: /photos&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# SubNav&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;subnav:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    github: &quot;https://github.com/luckykun&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     weibo: &quot;http://weibo.com/u/2732624311&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    zhihu: &quot;#&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rss: /atom.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;excerpt_link: 阅读全文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fancybox: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mathjax: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;top: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 是否开启动画效果&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;animate: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 是否在新窗口打开链接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;open_in_new: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Miscellaneous&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;google_analytics: &#39;&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;favicon: /favicon.ico&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#你的头像url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;avatar: /img.png&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#是否开启分享&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;share_jia: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;share_addthis: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;duoshuo: jarson7426&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#是否开启云标签&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tagcloud: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#是否开启友情链接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#不开启——&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;friends: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#开启——&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#friends:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#  百度一下: http://www.baidu.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#  淘宝商城: http://www.taobao.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#是否开启“关于我”。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#不开启——&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#aboutme: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#开启——&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;aboutme: true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看效果&lt;/p&gt;
&lt;p&gt;更改主题之后可以使用命令&lt;code&gt;hexo server&lt;/code&gt;打开本地服务，查看效果。&lt;/p&gt;
&lt;h1 id=&quot;部署到github&quot;&gt;&lt;a href=&quot;#部署到github&quot; class=&quot;headerlink&quot; title=&quot;部署到github&quot;&gt;&lt;/a&gt;部署到github&lt;/h1&gt;&lt;p&gt;上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;部署之前先修改&lt;code&gt;Blog/_config.yml&lt;/code&gt;文件。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;deploy:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type: git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    repository: https:&lt;span class=&quot;comment&quot;&gt;//github.com/luckykun/luckykun.github.io.git  //luckykun替换为你自己的用户名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    branch: master&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;code&gt;备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后使用以下命令进行部署。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;code&gt;备注：如果执行上述命令报错，你可以试试下面这个命令再试。&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-git --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，部署的时候会提示输入github的账号和密码。由于每次部署都会提示，很烦人，也很影响效率，所以你可以试着这样做：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在系统环境变量中设置一个环境变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtawy.com1.z0.glb.clouddn.com/home.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在你的用户目录（C:\Users\username）下新建一个叫 _netrc的文件，内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;machine github.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login your name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;password xxxxxx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你可以再部署试试，就不需要输入用户和密码，方便友好多了^_^&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部署成功后，你在浏览器中输入&lt;a href=&quot;http://luckykun.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luckykun.github.io&lt;/a&gt;，就能看到和本地一样的效果了。&lt;/p&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;可能会有同学发现，我除了使用了新的主题外，还加了&lt;code&gt;很多新的东西&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼠标移动头像上会有旋转效果。&lt;/li&gt;
&lt;li&gt;给文章添加打赏功能。&lt;/li&gt;
&lt;li&gt;添加回到顶部的功能。&lt;/li&gt;
&lt;li&gt;添加总站访问量和文章阅读量&lt;/li&gt;
&lt;li&gt;添加文章目录显示&lt;/li&gt;
&lt;li&gt;添加相册功能&lt;/li&gt;
&lt;li&gt;给网站配置独立的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实修改这些非常简单，只要你有html、css、js的基础就可以。 思路：因为整个网站都是依赖yilia主题。所以应该在theme/yilia文件夹下，修改对应的dom结构，然后添加对应的效果或者事件绑定就可以实现了。&lt;/p&gt;
&lt;p&gt;如果大家还有问题，欢迎留言，我会很乐意为大家解答的。&lt;/p&gt;
&lt;p&gt;好了，到这里搭建github博客的步骤就结束了。快快enjoy it吧！！！&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;一直都在博客园写博客，不过最近在逛园子的时候不小心看到了&lt;code&gt;hexo&lt;/code&gt;,简直有种相见恨晚的感觉呀！在github上创建自己的开源博客，维护方便，主题多多，更重要的是，终于找到只属于自己的小窝啦！也希望自己能坚持写文^_^&lt;/p&gt;
&lt;p&gt;为了引起读者的兴趣，先介绍一下，搭建完成之后，只需这几个简单常用的命令，就能够轻松维护自己的博客了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;(n)    &lt;span class=&quot;comment&quot;&gt;//写文章&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate(g)    &lt;span class=&quot;comment&quot;&gt;//把文章生成页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server(s)    &lt;span class=&quot;comment&quot;&gt;//启动本地服务调试&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy(d)    &lt;span class=&quot;comment&quot;&gt;//部署到github 可与hexo g合并为 hexo d -g&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo系列" scheme="http://yoursite.com/tags/hexo%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
